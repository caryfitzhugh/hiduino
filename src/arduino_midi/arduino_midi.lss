
arduino_midi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000eec  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d8  00000000  00000000  00000f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005a04  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015d3  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d12  00000000  00000000  000082af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000928  00000000  00000000  0000bfc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002b8d  00000000  00000000  0000c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e23  00000000  00000000  0000f479  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000570  00000000  00000000  0001329c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
   2:	00 00       	nop
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	9a c0       	rjmp	.+308    	; 0x15e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	01 c5       	rjmp	.+2562   	; 0xa30 <__vector_11>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	88 c1       	rjmp	.+784    	; 0x36e <__vector_23>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	1c 03 4a 00 65 00 72 00 69 00 63 00 68 00 6f 00     ..J.e.r.i.c.h.o.
  84:	4d 00 49 00 44 00 49 00 2f 00 34 00 00 00           M.I.D.I./.4...

00000092 <ManufacturerString>:
  92:	18 03 4a 00 65 00 72 00 69 00 63 00 68 00 6f 00     ..J.e.r.i.c.h.o.
  a2:	4d 00 49 00 44 00 49 00 00 00                       M.I.D.I...

000000ac <LanguageString>:
  ac:	04 03 09 04                                         ....

000000b0 <ConfigurationDescriptor>:
  b0:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  c0:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  d0:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  e0:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  f0:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
 100:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 110:	05 25 01 01 03                                      .%...

00000115 <DeviceDescriptor>:
 115:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 125:	00 01 00                                            ...

00000128 <__ctors_end>:
 128:	11 24       	eor	r1, r1
 12a:	1f be       	out	0x3f, r1	; 63
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	d2 e0       	ldi	r29, 0x02	; 2
 130:	de bf       	out	0x3e, r29	; 62
 132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
 134:	11 e0       	ldi	r17, 0x01	; 1
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	e8 e5       	ldi	r30, 0x58	; 88
 13c:	fe e0       	ldi	r31, 0x0E	; 14
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
 140:	05 90       	lpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	a0 30       	cpi	r26, 0x00	; 0
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	ad 31       	cpi	r26, 0x1D	; 29
 156:	b2 07       	cpc	r27, r18
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	c8 d0       	rcall	.+400    	; 0x2ec <main>
 15c:	7b c6       	rjmp	.+3318   	; 0xe54 <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <SetupHardware>:
}

uint8_t getChannelFromStatusByte(uint8_t inStatus)
{
	return (inStatus & 0x0f) + 1;
}
 160:	84 b7       	in	r24, 0x34	; 52
 162:	87 7f       	andi	r24, 0xF7	; 247
 164:	84 bf       	out	0x34, r24	; 52
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	80 93 60 00 	sts	0x0060, r24
 170:	10 92 60 00 	sts	0x0060, r1
 174:	0f be       	out	0x3f, r0	; 63
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 cd 00 	sts	0x00CD, r25
 17e:	80 93 cc 00 	sts	0x00CC, r24
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 ca 00 	sts	0x00CA, r24
 188:	10 92 c8 00 	sts	0x00C8, r1
 18c:	e9 ec       	ldi	r30, 0xC9	; 201
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	80 83       	st	Z, r24
 194:	53 9a       	sbi	0x0a, 3	; 10
 196:	5a 9a       	sbi	0x0b, 2	; 11
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	85 bd       	out	0x25, r24	; 37
 19c:	10 82       	st	Z, r1
 19e:	88 e9       	ldi	r24, 0x98	; 152
 1a0:	80 83       	st	Z, r24
 1a2:	46 9a       	sbi	0x08, 6	; 8
 1a4:	3e 9a       	sbi	0x07, 6	; 7
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	80 93 61 00 	sts	0x0061, r24
 1b2:	90 93 61 00 	sts	0x0061, r25
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	80 63       	ori	r24, 0x30	; 48
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	80 63       	ori	r24, 0x30	; 48
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	26 c4       	rjmp	.+2124   	; 0xa12 <USB_Init>

000001c6 <EVENT_USB_Device_Connect>:
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	80 63       	ori	r24, 0x30	; 48
 1ca:	8f 7e       	andi	r24, 0xEF	; 239
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	08 95       	ret

000001d0 <EVENT_USB_Device_Disconnect>:
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 63       	ori	r24, 0x30	; 48
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	08 95       	ret

000001da <EVENT_USB_Device_ConfigurationChanged>:
 1da:	cf 93       	push	r28
 1dc:	42 e3       	ldi	r20, 0x32	; 50
 1de:	61 e8       	ldi	r22, 0x81	; 129
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	58 d3       	rcall	.+1712   	; 0x894 <Endpoint_ConfigureEndpoint_Prv>
 1e4:	c8 2f       	mov	r28, r24
 1e6:	42 e3       	ldi	r20, 0x32	; 50
 1e8:	60 e8       	ldi	r22, 0x80	; 128
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	53 d3       	rcall	.+1702   	; 0x894 <Endpoint_ConfigureEndpoint_Prv>
 1ee:	88 23       	and	r24, r24
 1f0:	21 f0       	breq	.+8      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x20>
 1f2:	cc 23       	and	r28, r28
 1f4:	11 f0       	breq	.+4      	; 0x1fa <EVENT_USB_Device_ConfigurationChanged+0x20>
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0x22>
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	80 95       	com	r24
 200:	90 63       	ori	r25, 0x30	; 48
 202:	89 23       	and	r24, r25
 204:	8b b9       	out	0x0b, r24	; 11
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <MIDI_To_Host>:
 20a:	80 91 14 01 	lds	r24, 0x0114
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	41 f5       	brne	.+80     	; 0x262 <MIDI_To_Host+0x58>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 e9 00 	sts	0x00E9, r24
 218:	80 91 e8 00 	lds	r24, 0x00E8
 21c:	80 ff       	sbrs	r24, 0
 21e:	21 c0       	rjmp	.+66     	; 0x262 <MIDI_To_Host+0x58>
 220:	80 91 08 01 	lds	r24, 0x0108
 224:	88 23       	and	r24, r24
 226:	e9 f0       	breq	.+58     	; 0x262 <MIDI_To_Host+0x58>
 228:	10 92 08 01 	sts	0x0108, r1
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	d6 d1       	rcall	.+940    	; 0x5e6 <Endpoint_Write_Stream_LE>
 23a:	10 92 04 01 	sts	0x0104, r1
 23e:	10 92 05 01 	sts	0x0105, r1
 242:	10 92 06 01 	sts	0x0106, r1
 246:	10 92 07 01 	sts	0x0107, r1
 24a:	80 91 e8 00 	lds	r24, 0x00E8
 24e:	8e 77       	andi	r24, 0x7E	; 126
 250:	80 93 e8 00 	sts	0x00E8, r24
 254:	5c 98       	cbi	0x0b, 4	; 11
 256:	88 e8       	ldi	r24, 0x88	; 136
 258:	93 e1       	ldi	r25, 0x13	; 19
 25a:	90 93 03 01 	sts	0x0103, r25
 25e:	80 93 02 01 	sts	0x0102, r24
 262:	08 95       	ret

00000264 <MIDI_To_Arduino>:
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	00 d0       	rcall	.+0      	; 0x26a <MIDI_To_Arduino+0x6>
 26a:	00 d0       	rcall	.+0      	; 0x26c <MIDI_To_Arduino+0x8>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	80 91 14 01 	lds	r24, 0x0114
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	99 f5       	brne	.+102    	; 0x2de <MIDI_To_Arduino+0x7a>
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 e9 00 	sts	0x00E9, r24
 27e:	80 91 e8 00 	lds	r24, 0x00E8
 282:	82 ff       	sbrs	r24, 2
 284:	2c c0       	rjmp	.+88     	; 0x2de <MIDI_To_Arduino+0x7a>
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	f1 d1       	rcall	.+994    	; 0x676 <Endpoint_Read_Stream_LE>
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	90 91 c8 00 	lds	r25, 0x00C8
 29a:	95 ff       	sbrs	r25, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <MIDI_To_Arduino+0x32>
 29e:	80 93 ce 00 	sts	0x00CE, r24
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	90 91 c8 00 	lds	r25, 0x00C8
 2a8:	95 ff       	sbrs	r25, 5
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <MIDI_To_Arduino+0x40>
 2ac:	80 93 ce 00 	sts	0x00CE, r24
 2b0:	8c 81       	ldd	r24, Y+4	; 0x04
 2b2:	90 91 c8 00 	lds	r25, 0x00C8
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <MIDI_To_Arduino+0x4e>
 2ba:	80 93 ce 00 	sts	0x00CE, r24
 2be:	5d 98       	cbi	0x0b, 5	; 11
 2c0:	88 e8       	ldi	r24, 0x88	; 136
 2c2:	93 e1       	ldi	r25, 0x13	; 19
 2c4:	90 93 01 01 	sts	0x0101, r25
 2c8:	80 93 00 01 	sts	0x0100, r24
 2cc:	80 91 f2 00 	lds	r24, 0x00F2
 2d0:	81 11       	cpse	r24, r1
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <MIDI_To_Arduino+0x7a>
 2d4:	80 91 e8 00 	lds	r24, 0x00E8
 2d8:	8b 77       	andi	r24, 0x7B	; 123
 2da:	80 93 e8 00 	sts	0x00E8, r24
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <main>:
 2ec:	39 df       	rcall	.-398    	; 0x160 <SetupHardware>
 2ee:	78 94       	sei
 2f0:	78 94       	sei
 2f2:	80 91 02 01 	lds	r24, 0x0102
 2f6:	90 91 03 01 	lds	r25, 0x0103
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	31 f0       	breq	.+12     	; 0x30a <__stack+0xb>
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	90 93 03 01 	sts	0x0103, r25
 304:	80 93 02 01 	sts	0x0102, r24
 308:	01 c0       	rjmp	.+2      	; 0x30c <__stack+0xd>
 30a:	5c 9a       	sbi	0x0b, 4	; 11
 30c:	80 91 00 01 	lds	r24, 0x0100
 310:	90 91 01 01 	lds	r25, 0x0101
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	31 f0       	breq	.+12     	; 0x324 <__stack+0x25>
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	90 93 01 01 	sts	0x0101, r25
 31e:	80 93 00 01 	sts	0x0100, r24
 322:	01 c0       	rjmp	.+2      	; 0x326 <__stack+0x27>
 324:	5d 9a       	sbi	0x0b, 5	; 11
 326:	9e df       	rcall	.-196    	; 0x264 <MIDI_To_Arduino>
 328:	70 df       	rcall	.-288    	; 0x20a <MIDI_To_Host>
 32a:	78 d5       	rcall	.+2800   	; 0xe1c <USB_USBTask>
 32c:	e2 cf       	rjmp	.-60     	; 0x2f2 <main+0x6>

0000032e <getTypeFromStatusByte>:
 32e:	87 ff       	sbrs	r24, 7
 330:	0c c0       	rjmp	.+24     	; 0x34a <getTypeFromStatusByte+0x1c>
 332:	9c e0       	ldi	r25, 0x0C	; 12
 334:	98 0f       	add	r25, r24
 336:	92 30       	cpi	r25, 0x02	; 2
 338:	40 f0       	brcs	.+16     	; 0x34a <getTypeFromStatusByte+0x1c>
 33a:	98 2f       	mov	r25, r24
 33c:	9b 7f       	andi	r25, 0xFB	; 251
 33e:	99 3f       	cpi	r25, 0xF9	; 249
 340:	21 f0       	breq	.+8      	; 0x34a <getTypeFromStatusByte+0x1c>
 342:	80 3f       	cpi	r24, 0xF0	; 240
 344:	18 f4       	brcc	.+6      	; 0x34c <getTypeFromStatusByte+0x1e>
 346:	80 7f       	andi	r24, 0xF0	; 240
 348:	08 95       	ret
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret

0000034e <isChannelMessage>:
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
 34e:	98 2f       	mov	r25, r24
 350:	9f 7e       	andi	r25, 0xEF	; 239
 352:	28 2f       	mov	r18, r24
 354:	2f 7c       	andi	r18, 0xCF	; 207
 356:	20 38       	cpi	r18, 0x80	; 128
 358:	39 f0       	breq	.+14     	; 0x368 <isChannelMessage+0x1a>
{
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
 35a:	80 3e       	cpi	r24, 0xE0	; 224
 35c:	29 f0       	breq	.+10     	; 0x368 <isChannelMessage+0x1a>
            inType == PitchBend         ||
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 3c       	cpi	r25, 0xC0	; 192
 362:	19 f0       	breq	.+6      	; 0x36a <isChannelMessage+0x1c>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	01 c0       	rjmp	.+2      	; 0x36a <isChannelMessage+0x1c>
 368:	81 e0       	ldi	r24, 0x01	; 1
            inType == ProgramChange);
}
 36a:	81 70       	andi	r24, 0x01	; 1
 36c:	08 95       	ret

0000036e <__vector_23>:

}

// Parse via Arduino/Serial
ISR(USART1_RX_vect, ISR_BLOCK) 
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 394:	80 91 14 01 	lds	r24, 0x0114
 398:	84 30       	cpi	r24, 0x04	; 4
 39a:	09 f0       	breq	.+2      	; 0x39e <__vector_23+0x30>
 39c:	df c0       	rjmp	.+446    	; 0x55c <__vector_23+0x1ee>

	const uint8_t extracted = UDR1;
 39e:	c0 91 ce 00 	lds	r28, 0x00CE

	// Borrowed + Modified from Francois Best's Arduino MIDI Library
	// https://github.com/FortySevenEffects/arduino_midi_library
    if (mPendingMessageIndex == 0)
 3a2:	40 91 0b 01 	lds	r20, 0x010B
 3a6:	41 11       	cpse	r20, r1
 3a8:	78 c0       	rjmp	.+240    	; 0x49a <__vector_23+0x12c>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
 3aa:	c0 93 0d 01 	sts	0x010D, r28

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
 3ae:	d0 91 0a 01 	lds	r29, 0x010A
 3b2:	8d 2f       	mov	r24, r29
 3b4:	bc df       	rcall	.-136    	; 0x32e <getTypeFromStatusByte>
 3b6:	cb df       	rcall	.-106    	; 0x34e <isChannelMessage>
 3b8:	88 23       	and	r24, r24
 3ba:	49 f0       	breq	.+18     	; 0x3ce <__vector_23+0x60>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it to the pending message
            if (extracted < 0x80)
 3bc:	c7 fd       	sbrc	r28, 7
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <__vector_23+0x60>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
 3c0:	d0 93 0d 01 	sts	0x010D, r29
                mPendingMessage[1]   = extracted;
 3c4:	c0 93 0e 01 	sts	0x010E, r28
                mPendingMessageIndex = 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 0b 01 	sts	0x010B, r24
            }
            // Else we received another status byte, so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
 3ce:	c0 91 0d 01 	lds	r28, 0x010D
 3d2:	8c 2f       	mov	r24, r28
 3d4:	ac df       	rcall	.-168    	; 0x32e <getTypeFromStatusByte>
 3d6:	81 3f       	cpi	r24, 0xF1	; 241
 3d8:	91 f1       	breq	.+100    	; 0x43e <__vector_23+0xd0>
 3da:	88 f4       	brcc	.+34     	; 0x3fe <__vector_23+0x90>
 3dc:	80 3b       	cpi	r24, 0xB0	; 176
 3de:	89 f1       	breq	.+98     	; 0x442 <__vector_23+0xd4>
 3e0:	38 f4       	brcc	.+14     	; 0x3f0 <__vector_23+0x82>
 3e2:	80 39       	cpi	r24, 0x90	; 144
 3e4:	71 f1       	breq	.+92     	; 0x442 <__vector_23+0xd4>
 3e6:	80 3a       	cpi	r24, 0xA0	; 160
 3e8:	61 f1       	breq	.+88     	; 0x442 <__vector_23+0xd4>
 3ea:	80 38       	cpi	r24, 0x80	; 128
 3ec:	69 f5       	brne	.+90     	; 0x448 <__vector_23+0xda>
 3ee:	29 c0       	rjmp	.+82     	; 0x442 <__vector_23+0xd4>
 3f0:	80 3d       	cpi	r24, 0xD0	; 208
 3f2:	29 f1       	breq	.+74     	; 0x43e <__vector_23+0xd0>
 3f4:	80 3e       	cpi	r24, 0xE0	; 224
 3f6:	29 f1       	breq	.+74     	; 0x442 <__vector_23+0xd4>
 3f8:	80 3c       	cpi	r24, 0xC0	; 192
 3fa:	31 f5       	brne	.+76     	; 0x448 <__vector_23+0xda>
 3fc:	20 c0       	rjmp	.+64     	; 0x43e <__vector_23+0xd0>
 3fe:	88 3f       	cpi	r24, 0xF8	; 248
 400:	69 f0       	breq	.+26     	; 0x41c <__vector_23+0xae>
 402:	30 f4       	brcc	.+12     	; 0x410 <__vector_23+0xa2>
 404:	83 3f       	cpi	r24, 0xF3	; 243
 406:	d9 f0       	breq	.+54     	; 0x43e <__vector_23+0xd0>
 408:	e0 f0       	brcs	.+56     	; 0x442 <__vector_23+0xd4>
 40a:	86 3f       	cpi	r24, 0xF6	; 246
 40c:	39 f0       	breq	.+14     	; 0x41c <__vector_23+0xae>
 40e:	1c c0       	rjmp	.+56     	; 0x448 <__vector_23+0xda>
 410:	8a 3f       	cpi	r24, 0xFA	; 250
 412:	d0 f0       	brcs	.+52     	; 0x448 <__vector_23+0xda>
 414:	8d 3f       	cpi	r24, 0xFD	; 253
 416:	10 f0       	brcs	.+4      	; 0x41c <__vector_23+0xae>
 418:	8e 3f       	cpi	r24, 0xFE	; 254
 41a:	b0 f0       	brcs	.+44     	; 0x448 <__vector_23+0xda>
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
            	mCompleteMessage.Event 	 = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 41c:	8f e0       	ldi	r24, 0x0F	; 15
 41e:	80 93 04 01 	sts	0x0104, r24
                mCompleteMessage.Data1   = mPendingMessage[0];
 422:	c0 93 05 01 	sts	0x0105, r28
                mCompleteMessage.Data2   = 0;
 426:	10 92 06 01 	sts	0x0106, r1
                mCompleteMessage.Data3   = 0;
 42a:	10 92 07 01 	sts	0x0107, r1
                mPendingMessageValid  	 = true;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 08 01 	sts	0x0108, r24

                // We still need to reset these
                mPendingMessageIndex = 0;
 434:	10 92 0b 01 	sts	0x010B, r1
                mPendingMessageExpectedLength = 0;
 438:	10 92 09 01 	sts	0x0109, r1

                return;
 43c:	8f c0       	rjmp	.+286    	; 0x55c <__vector_23+0x1ee>
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
 43e:	92 e0       	ldi	r25, 0x02	; 2
 440:	01 c0       	rjmp	.+2      	; 0x444 <__vector_23+0xd6>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
 442:	93 e0       	ldi	r25, 0x03	; 3
 444:	90 93 09 01 	sts	0x0109, r25
            default:
                // Something bad happened
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 448:	90 91 0b 01 	lds	r25, 0x010B
 44c:	60 91 09 01 	lds	r22, 0x0109
 450:	49 2f       	mov	r20, r25
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	26 2f       	mov	r18, r22
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	31 09       	sbc	r19, r1
 45c:	42 17       	cp	r20, r18
 45e:	53 07       	cpc	r21, r19
 460:	c4 f0       	brlt	.+48     	; 0x492 <__vector_23+0x124>
        {
            // Reception complete
            mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 462:	82 95       	swap	r24
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	80 93 04 01 	sts	0x0104, r24
            mCompleteMessage.Data1 = mPendingMessage[0]; // status = channel + type
 46a:	c0 93 05 01 	sts	0x0105, r28
 			mCompleteMessage.Data2 = mPendingMessage[1];
 46e:	80 91 0e 01 	lds	r24, 0x010E
 472:	80 93 06 01 	sts	0x0106, r24

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 476:	63 30       	cpi	r22, 0x03	; 3
 478:	29 f4       	brne	.+10     	; 0x484 <__vector_23+0x116>
                mCompleteMessage.Data3 = mPendingMessage[2];
 47a:	80 91 0f 01 	lds	r24, 0x010F
 47e:	80 93 07 01 	sts	0x0107, r24
 482:	02 c0       	rjmp	.+4      	; 0x488 <__vector_23+0x11a>
            else
                mCompleteMessage.Data3 = 0;
 484:	10 92 07 01 	sts	0x0107, r1

            mPendingMessageIndex = 0;
 488:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 48c:	10 92 09 01 	sts	0x0109, r1
 490:	1b c0       	rjmp	.+54     	; 0x4c8 <__vector_23+0x15a>
            return;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
 492:	9f 5f       	subi	r25, 0xFF	; 255
 494:	90 93 0b 01 	sts	0x010B, r25
 498:	61 c0       	rjmp	.+194    	; 0x55c <__vector_23+0x1ee>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
 49a:	c7 ff       	sbrs	r28, 7
 49c:	19 c0       	rjmp	.+50     	; 0x4d0 <__vector_23+0x162>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
 49e:	cd 3f       	cpi	r28, 0xFD	; 253
 4a0:	28 f4       	brcc	.+10     	; 0x4ac <__vector_23+0x13e>
 4a2:	ca 3f       	cpi	r28, 0xFA	; 250
 4a4:	28 f4       	brcc	.+10     	; 0x4b0 <__vector_23+0x142>
 4a6:	c8 3f       	cpi	r28, 0xF8	; 248
 4a8:	99 f4       	brne	.+38     	; 0x4d0 <__vector_23+0x162>
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__vector_23+0x142>
 4ac:	ce 3f       	cpi	r28, 0xFE	; 254
 4ae:	80 f0       	brcs	.+32     	; 0x4d0 <__vector_23+0x162>
                    // pass it to the structure for being read outside
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.
           		 	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(extracted));
 4b0:	8c 2f       	mov	r24, r28
 4b2:	3d df       	rcall	.-390    	; 0x32e <getTypeFromStatusByte>
 4b4:	82 95       	swap	r24
 4b6:	8f 70       	andi	r24, 0x0F	; 15
 4b8:	80 93 04 01 	sts	0x0104, r24
            		mCompleteMessage.Data1 = extracted;
 4bc:	c0 93 05 01 	sts	0x0105, r28
                    mCompleteMessage.Data2 = 0;
 4c0:	10 92 06 01 	sts	0x0106, r1
                    mCompleteMessage.Data3 = 0;
 4c4:	10 92 07 01 	sts	0x0107, r1
                   	mPendingMessageValid   = true;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 08 01 	sts	0x0108, r24
                    return;
 4ce:	46 c0       	rjmp	.+140    	; 0x55c <__vector_23+0x1ee>
                    break;
            }
        }

        // Add extracted data byte to pending message
        mPendingMessage[mPendingMessageIndex] = extracted;
 4d0:	24 2f       	mov	r18, r20
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	e3 5f       	subi	r30, 0xF3	; 243
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	c0 83       	st	Z, r28

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 4dc:	d0 91 09 01 	lds	r29, 0x0109
 4e0:	8d 2f       	mov	r24, r29
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	28 17       	cp	r18, r24
 4e8:	39 07       	cpc	r19, r25
 4ea:	ac f1       	brlt	.+106    	; 0x556 <__vector_23+0x1e8>
        {

        	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 4ec:	c0 91 0d 01 	lds	r28, 0x010D
 4f0:	8c 2f       	mov	r24, r28
 4f2:	1d df       	rcall	.-454    	; 0x32e <getTypeFromStatusByte>
 4f4:	98 2f       	mov	r25, r24
 4f6:	92 95       	swap	r25
 4f8:	9f 70       	andi	r25, 0x0F	; 15
 4fa:	90 93 04 01 	sts	0x0104, r25
            mCompleteMessage.Data1 = mPendingMessage[0];
 4fe:	c0 93 05 01 	sts	0x0105, r28
            mCompleteMessage.Data2 = mPendingMessage[1];
 502:	90 91 0e 01 	lds	r25, 0x010E
 506:	90 93 06 01 	sts	0x0106, r25

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 50a:	d3 30       	cpi	r29, 0x03	; 3
 50c:	29 f4       	brne	.+10     	; 0x518 <__vector_23+0x1aa>
                mCompleteMessage.Data3 = mPendingMessage[2];
 50e:	90 91 0f 01 	lds	r25, 0x010F
 512:	90 93 07 01 	sts	0x0107, r25
 516:	02 c0       	rjmp	.+4      	; 0x51c <__vector_23+0x1ae>
            else
                mCompleteMessage.Data3 = 0;
 518:	10 92 07 01 	sts	0x0107, r1

            // Reset local variables
            mPendingMessageIndex = 0;
 51c:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 520:	10 92 09 01 	sts	0x0109, r1
            mPendingMessageValid = true;
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	90 93 08 01 	sts	0x0108, r25

            // Activate running status (if enabled for the received type)
            switch (getTypeFromStatusByte(mPendingMessage[0]))
 52a:	80 3b       	cpi	r24, 0xB0	; 176
 52c:	71 f0       	breq	.+28     	; 0x54a <__vector_23+0x1dc>
 52e:	38 f4       	brcc	.+14     	; 0x53e <__vector_23+0x1d0>
 530:	80 39       	cpi	r24, 0x90	; 144
 532:	59 f0       	breq	.+22     	; 0x54a <__vector_23+0x1dc>
 534:	80 3a       	cpi	r24, 0xA0	; 160
 536:	49 f0       	breq	.+18     	; 0x54a <__vector_23+0x1dc>
 538:	80 38       	cpi	r24, 0x80	; 128
 53a:	51 f4       	brne	.+20     	; 0x550 <__vector_23+0x1e2>
 53c:	06 c0       	rjmp	.+12     	; 0x54a <__vector_23+0x1dc>
 53e:	80 3d       	cpi	r24, 0xD0	; 208
 540:	21 f0       	breq	.+8      	; 0x54a <__vector_23+0x1dc>
 542:	80 3e       	cpi	r24, 0xE0	; 224
 544:	11 f0       	breq	.+4      	; 0x54a <__vector_23+0x1dc>
 546:	80 3c       	cpi	r24, 0xC0	; 192
 548:	19 f4       	brne	.+6      	; 0x550 <__vector_23+0x1e2>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
 54a:	c0 93 0a 01 	sts	0x010A, r28
                    break;
 54e:	06 c0       	rjmp	.+12     	; 0x55c <__vector_23+0x1ee>

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
 550:	10 92 0a 01 	sts	0x010A, r1
                    break;
 554:	03 c0       	rjmp	.+6      	; 0x55c <__vector_23+0x1ee>
            return;
        }
        else
        {
            // Not complete? Then update the index of the pending message.
            mPendingMessageIndex++;
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	40 93 0b 01 	sts	0x010B, r20
        }
    }
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 582:	29 2f       	mov	r18, r25
 584:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 586:	22 30       	cpi	r18, 0x02	; 2
 588:	31 05       	cpc	r19, r1
 58a:	59 f0       	breq	.+22     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x20>
 58c:	23 30       	cpi	r18, 0x03	; 3
 58e:	31 05       	cpc	r19, r1
 590:	69 f0       	breq	.+26     	; 0x5ac <CALLBACK_USB_GetDescriptor+0x2a>
 592:	21 30       	cpi	r18, 0x01	; 1
 594:	31 05       	cpc	r19, r1
 596:	f9 f4       	brne	.+62     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 598:	82 e1       	ldi	r24, 0x12	; 18
 59a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 59c:	25 e1       	ldi	r18, 0x15	; 21
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	1e c0       	rjmp	.+60     	; 0x5de <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 5a2:	85 e6       	ldi	r24, 0x65	; 101
 5a4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 5a6:	20 eb       	ldi	r18, 0xB0	; 176
 5a8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 5aa:	19 c0       	rjmp	.+50     	; 0x5de <CALLBACK_USB_GetDescriptor+0x5c>
 5ac:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	91 05       	cpc	r25, r1
 5b2:	41 f0       	breq	.+16     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x42>
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	91 05       	cpc	r25, r1
 5b8:	41 f0       	breq	.+16     	; 0x5ca <CALLBACK_USB_GetDescriptor+0x48>
 5ba:	89 2b       	or	r24, r25
 5bc:	61 f4       	brne	.+24     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5be:	ec ea       	ldi	r30, 0xAC	; 172
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5c4:	e2 e9       	ldi	r30, 0x92	; 146
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5ca:	e4 e7       	ldi	r30, 0x74	; 116
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	84 91       	lpm	r24, Z
 5d0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 5d2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 5de:	fa 01       	movw	r30, r20
 5e0:	31 83       	std	Z+1, r19	; 0x01
 5e2:	20 83       	st	Z, r18
	return Size;
}
 5e4:	08 95       	ret

000005e6 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	7c 01       	movw	r14, r24
 5f8:	8b 01       	movw	r16, r22
 5fa:	ea 01       	movw	r28, r20
 5fc:	a1 d1       	rcall	.+834    	; 0x940 <Endpoint_WaitUntilReady>
 5fe:	81 11       	cpse	r24, r1
 600:	31 c0       	rjmp	.+98     	; 0x664 <Endpoint_Write_Stream_LE+0x7e>
 602:	20 97       	sbiw	r28, 0x00	; 0
 604:	31 f0       	breq	.+12     	; 0x612 <Endpoint_Write_Stream_LE+0x2c>
 606:	88 81       	ld	r24, Y
 608:	99 81       	ldd	r25, Y+1	; 0x01
 60a:	08 1b       	sub	r16, r24
 60c:	19 0b       	sbc	r17, r25
 60e:	e8 0e       	add	r14, r24
 610:	f9 1e       	adc	r15, r25
 612:	c1 2c       	mov	r12, r1
 614:	d1 2c       	mov	r13, r1
 616:	01 15       	cp	r16, r1
 618:	11 05       	cpc	r17, r1
 61a:	19 f1       	breq	.+70     	; 0x662 <Endpoint_Write_Stream_LE+0x7c>
 61c:	80 91 e8 00 	lds	r24, 0x00E8
 620:	85 fd       	sbrc	r24, 5
 622:	14 c0       	rjmp	.+40     	; 0x64c <Endpoint_Write_Stream_LE+0x66>
 624:	80 91 e8 00 	lds	r24, 0x00E8
 628:	8e 77       	andi	r24, 0x7E	; 126
 62a:	80 93 e8 00 	sts	0x00E8, r24
 62e:	f6 d3       	rcall	.+2028   	; 0xe1c <USB_USBTask>
 630:	20 97       	sbiw	r28, 0x00	; 0
 632:	41 f0       	breq	.+16     	; 0x644 <Endpoint_Write_Stream_LE+0x5e>
 634:	88 81       	ld	r24, Y
 636:	99 81       	ldd	r25, Y+1	; 0x01
 638:	8c 0d       	add	r24, r12
 63a:	9d 1d       	adc	r25, r13
 63c:	99 83       	std	Y+1, r25	; 0x01
 63e:	88 83       	st	Y, r24
 640:	85 e0       	ldi	r24, 0x05	; 5
 642:	10 c0       	rjmp	.+32     	; 0x664 <Endpoint_Write_Stream_LE+0x7e>
 644:	7d d1       	rcall	.+762    	; 0x940 <Endpoint_WaitUntilReady>
 646:	88 23       	and	r24, r24
 648:	31 f3       	breq	.-52     	; 0x616 <Endpoint_Write_Stream_LE+0x30>
 64a:	0c c0       	rjmp	.+24     	; 0x664 <Endpoint_Write_Stream_LE+0x7e>
 64c:	f7 01       	movw	r30, r14
 64e:	81 91       	ld	r24, Z+
 650:	7f 01       	movw	r14, r30
 652:	80 93 f1 00 	sts	0x00F1, r24
 656:	01 50       	subi	r16, 0x01	; 1
 658:	11 09       	sbc	r17, r1
 65a:	ff ef       	ldi	r31, 0xFF	; 255
 65c:	cf 1a       	sub	r12, r31
 65e:	df 0a       	sbc	r13, r31
 660:	da cf       	rjmp	.-76     	; 0x616 <Endpoint_Write_Stream_LE+0x30>
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	df 90       	pop	r13
 672:	cf 90       	pop	r12
 674:	08 95       	ret

00000676 <Endpoint_Read_Stream_LE>:
 676:	cf 92       	push	r12
 678:	df 92       	push	r13
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	7c 01       	movw	r14, r24
 688:	8b 01       	movw	r16, r22
 68a:	ea 01       	movw	r28, r20
 68c:	59 d1       	rcall	.+690    	; 0x940 <Endpoint_WaitUntilReady>
 68e:	81 11       	cpse	r24, r1
 690:	31 c0       	rjmp	.+98     	; 0x6f4 <Endpoint_Read_Stream_LE+0x7e>
 692:	20 97       	sbiw	r28, 0x00	; 0
 694:	31 f0       	breq	.+12     	; 0x6a2 <Endpoint_Read_Stream_LE+0x2c>
 696:	88 81       	ld	r24, Y
 698:	99 81       	ldd	r25, Y+1	; 0x01
 69a:	08 1b       	sub	r16, r24
 69c:	19 0b       	sbc	r17, r25
 69e:	e8 0e       	add	r14, r24
 6a0:	f9 1e       	adc	r15, r25
 6a2:	c1 2c       	mov	r12, r1
 6a4:	d1 2c       	mov	r13, r1
 6a6:	01 15       	cp	r16, r1
 6a8:	11 05       	cpc	r17, r1
 6aa:	19 f1       	breq	.+70     	; 0x6f2 <Endpoint_Read_Stream_LE+0x7c>
 6ac:	80 91 e8 00 	lds	r24, 0x00E8
 6b0:	85 fd       	sbrc	r24, 5
 6b2:	14 c0       	rjmp	.+40     	; 0x6dc <Endpoint_Read_Stream_LE+0x66>
 6b4:	80 91 e8 00 	lds	r24, 0x00E8
 6b8:	8b 77       	andi	r24, 0x7B	; 123
 6ba:	80 93 e8 00 	sts	0x00E8, r24
 6be:	ae d3       	rcall	.+1884   	; 0xe1c <USB_USBTask>
 6c0:	20 97       	sbiw	r28, 0x00	; 0
 6c2:	41 f0       	breq	.+16     	; 0x6d4 <Endpoint_Read_Stream_LE+0x5e>
 6c4:	88 81       	ld	r24, Y
 6c6:	99 81       	ldd	r25, Y+1	; 0x01
 6c8:	8c 0d       	add	r24, r12
 6ca:	9d 1d       	adc	r25, r13
 6cc:	99 83       	std	Y+1, r25	; 0x01
 6ce:	88 83       	st	Y, r24
 6d0:	85 e0       	ldi	r24, 0x05	; 5
 6d2:	10 c0       	rjmp	.+32     	; 0x6f4 <Endpoint_Read_Stream_LE+0x7e>
 6d4:	35 d1       	rcall	.+618    	; 0x940 <Endpoint_WaitUntilReady>
 6d6:	88 23       	and	r24, r24
 6d8:	31 f3       	breq	.-52     	; 0x6a6 <Endpoint_Read_Stream_LE+0x30>
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <Endpoint_Read_Stream_LE+0x7e>
 6dc:	80 91 f1 00 	lds	r24, 0x00F1
 6e0:	f7 01       	movw	r30, r14
 6e2:	81 93       	st	Z+, r24
 6e4:	7f 01       	movw	r14, r30
 6e6:	01 50       	subi	r16, 0x01	; 1
 6e8:	11 09       	sbc	r17, r1
 6ea:	ff ef       	ldi	r31, 0xFF	; 255
 6ec:	cf 1a       	sub	r12, r31
 6ee:	df 0a       	sbc	r13, r31
 6f0:	da cf       	rjmp	.-76     	; 0x6a6 <Endpoint_Read_Stream_LE+0x30>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <Endpoint_Write_Control_Stream_LE>:
 706:	20 91 1b 01 	lds	r18, 0x011B
 70a:	30 91 1c 01 	lds	r19, 0x011C
 70e:	26 17       	cp	r18, r22
 710:	37 07       	cpc	r19, r23
 712:	48 f0       	brcs	.+18     	; 0x726 <Endpoint_Write_Control_Stream_LE+0x20>
 714:	61 15       	cp	r22, r1
 716:	71 05       	cpc	r23, r1
 718:	39 f4       	brne	.+14     	; 0x728 <Endpoint_Write_Control_Stream_LE+0x22>
 71a:	20 91 e8 00 	lds	r18, 0x00E8
 71e:	2e 77       	andi	r18, 0x7E	; 126
 720:	20 93 e8 00 	sts	0x00E8, r18
 724:	01 c0       	rjmp	.+2      	; 0x728 <Endpoint_Write_Control_Stream_LE+0x22>
 726:	b9 01       	movw	r22, r18
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	61 15       	cp	r22, r1
 72c:	71 05       	cpc	r23, r1
 72e:	d1 f1       	breq	.+116    	; 0x7a4 <Endpoint_Write_Control_Stream_LE+0x9e>
 730:	30 91 14 01 	lds	r19, 0x0114
 734:	33 23       	and	r19, r19
 736:	09 f4       	brne	.+2      	; 0x73a <Endpoint_Write_Control_Stream_LE+0x34>
 738:	43 c0       	rjmp	.+134    	; 0x7c0 <Endpoint_Write_Control_Stream_LE+0xba>
 73a:	35 30       	cpi	r19, 0x05	; 5
 73c:	09 f4       	brne	.+2      	; 0x740 <Endpoint_Write_Control_Stream_LE+0x3a>
 73e:	42 c0       	rjmp	.+132    	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0xbe>
 740:	30 91 e8 00 	lds	r19, 0x00E8
 744:	33 fd       	sbrc	r19, 3
 746:	40 c0       	rjmp	.+128    	; 0x7c8 <Endpoint_Write_Control_Stream_LE+0xc2>
 748:	30 91 e8 00 	lds	r19, 0x00E8
 74c:	32 ff       	sbrs	r19, 2
 74e:	06 c0       	rjmp	.+12     	; 0x75c <Endpoint_Write_Control_Stream_LE+0x56>
 750:	80 91 e8 00 	lds	r24, 0x00E8
 754:	82 ff       	sbrs	r24, 2
 756:	29 c0       	rjmp	.+82     	; 0x7aa <Endpoint_Write_Control_Stream_LE+0xa4>
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
 75c:	30 91 e8 00 	lds	r19, 0x00E8
 760:	30 ff       	sbrs	r19, 0
 762:	e3 cf       	rjmp	.-58     	; 0x72a <Endpoint_Write_Control_Stream_LE+0x24>
 764:	20 91 f2 00 	lds	r18, 0x00F2
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	fc 01       	movw	r30, r24
 76c:	28 1b       	sub	r18, r24
 76e:	39 0b       	sbc	r19, r25
 770:	cf 01       	movw	r24, r30
 772:	82 0f       	add	r24, r18
 774:	93 1f       	adc	r25, r19
 776:	61 15       	cp	r22, r1
 778:	71 05       	cpc	r23, r1
 77a:	49 f0       	breq	.+18     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x88>
 77c:	88 30       	cpi	r24, 0x08	; 8
 77e:	91 05       	cpc	r25, r1
 780:	30 f4       	brcc	.+12     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x88>
 782:	81 91       	ld	r24, Z+
 784:	80 93 f1 00 	sts	0x00F1, r24
 788:	61 50       	subi	r22, 0x01	; 1
 78a:	71 09       	sbc	r23, r1
 78c:	f1 cf       	rjmp	.-30     	; 0x770 <Endpoint_Write_Control_Stream_LE+0x6a>
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	08 97       	sbiw	r24, 0x08	; 8
 792:	09 f0       	breq	.+2      	; 0x796 <Endpoint_Write_Control_Stream_LE+0x90>
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	80 91 e8 00 	lds	r24, 0x00E8
 79a:	8e 77       	andi	r24, 0x7E	; 126
 79c:	80 93 e8 00 	sts	0x00E8, r24
 7a0:	cf 01       	movw	r24, r30
 7a2:	c3 cf       	rjmp	.-122    	; 0x72a <Endpoint_Write_Control_Stream_LE+0x24>
 7a4:	21 11       	cpse	r18, r1
 7a6:	c4 cf       	rjmp	.-120    	; 0x730 <Endpoint_Write_Control_Stream_LE+0x2a>
 7a8:	d3 cf       	rjmp	.-90     	; 0x750 <Endpoint_Write_Control_Stream_LE+0x4a>
 7aa:	80 91 14 01 	lds	r24, 0x0114
 7ae:	88 23       	and	r24, r24
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <Endpoint_Write_Control_Stream_LE+0xba>
 7b2:	85 30       	cpi	r24, 0x05	; 5
 7b4:	39 f0       	breq	.+14     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0xbe>
 7b6:	80 91 e8 00 	lds	r24, 0x00E8
 7ba:	83 ff       	sbrs	r24, 3
 7bc:	c9 cf       	rjmp	.-110    	; 0x750 <Endpoint_Write_Control_Stream_LE+0x4a>
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <Endpoint_Write_Control_Stream_LE+0xc2>
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	08 95       	ret
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	08 95       	ret
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret

000007cc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7cc:	20 91 1b 01 	lds	r18, 0x011B
 7d0:	30 91 1c 01 	lds	r19, 0x011C
 7d4:	26 17       	cp	r18, r22
 7d6:	37 07       	cpc	r19, r23
 7d8:	48 f0       	brcs	.+18     	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7da:	61 15       	cp	r22, r1
 7dc:	71 05       	cpc	r23, r1
 7de:	39 f4       	brne	.+14     	; 0x7ee <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7e0:	20 91 e8 00 	lds	r18, 0x00E8
 7e4:	2e 77       	andi	r18, 0x7E	; 126
 7e6:	20 93 e8 00 	sts	0x00E8, r18
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <Endpoint_Write_Control_PStream_LE+0x22>
 7ec:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7ee:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7f0:	61 15       	cp	r22, r1
 7f2:	71 05       	cpc	r23, r1
 7f4:	d9 f1       	breq	.+118    	; 0x86c <Endpoint_Write_Control_PStream_LE+0xa0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7f6:	30 91 14 01 	lds	r19, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7fa:	33 23       	and	r19, r19
 7fc:	09 f4       	brne	.+2      	; 0x800 <Endpoint_Write_Control_PStream_LE+0x34>
 7fe:	44 c0       	rjmp	.+136    	; 0x888 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 800:	35 30       	cpi	r19, 0x05	; 5
 802:	09 f4       	brne	.+2      	; 0x806 <Endpoint_Write_Control_PStream_LE+0x3a>
 804:	43 c0       	rjmp	.+134    	; 0x88c <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 806:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 80a:	33 fd       	sbrc	r19, 3
 80c:	41 c0       	rjmp	.+130    	; 0x890 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 80e:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 812:	32 ff       	sbrs	r19, 2
 814:	06 c0       	rjmp	.+12     	; 0x822 <Endpoint_Write_Control_PStream_LE+0x56>
 816:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 81a:	82 ff       	sbrs	r24, 2
 81c:	2a c0       	rjmp	.+84     	; 0x872 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 822:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 826:	30 ff       	sbrs	r19, 0
 828:	e3 cf       	rjmp	.-58     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 82a:	20 91 f2 00 	lds	r18, 0x00F2
 82e:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 830:	fc 01       	movw	r30, r24
 832:	28 1b       	sub	r18, r24
 834:	39 0b       	sbc	r19, r25
 836:	c9 01       	movw	r24, r18
 838:	8e 0f       	add	r24, r30
 83a:	9f 1f       	adc	r25, r31
 83c:	61 15       	cp	r22, r1
 83e:	71 05       	cpc	r23, r1
 840:	51 f0       	breq	.+20     	; 0x856 <Endpoint_Write_Control_PStream_LE+0x8a>
 842:	88 30       	cpi	r24, 0x08	; 8
 844:	91 05       	cpc	r25, r1
 846:	38 f4       	brcc	.+14     	; 0x856 <Endpoint_Write_Control_PStream_LE+0x8a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 848:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 84a:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 84e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 850:	61 50       	subi	r22, 0x01	; 1
 852:	71 09       	sbc	r23, r1
 854:	f0 cf       	rjmp	.-32     	; 0x836 <Endpoint_Write_Control_PStream_LE+0x6a>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 856:	21 e0       	ldi	r18, 0x01	; 1
 858:	08 97       	sbiw	r24, 0x08	; 8
 85a:	09 f0       	breq	.+2      	; 0x85e <Endpoint_Write_Control_PStream_LE+0x92>
 85c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 85e:	80 91 e8 00 	lds	r24, 0x00E8
 862:	8e 77       	andi	r24, 0x7E	; 126
 864:	80 93 e8 00 	sts	0x00E8, r24
 868:	cf 01       	movw	r24, r30
 86a:	c2 cf       	rjmp	.-124    	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 86c:	21 11       	cpse	r18, r1
 86e:	c3 cf       	rjmp	.-122    	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x2a>
 870:	d2 cf       	rjmp	.-92     	; 0x816 <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 872:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 876:	88 23       	and	r24, r24
 878:	39 f0       	breq	.+14     	; 0x888 <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 87a:	85 30       	cpi	r24, 0x05	; 5
 87c:	39 f0       	breq	.+14     	; 0x88c <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 87e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 882:	83 ff       	sbrs	r24, 3
 884:	c8 cf       	rjmp	.-112    	; 0x816 <Endpoint_Write_Control_PStream_LE+0x4a>
 886:	04 c0       	rjmp	.+8      	; 0x890 <Endpoint_Write_Control_PStream_LE+0xc4>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 890:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 892:	08 95       	ret

00000894 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 894:	98 2f       	mov	r25, r24
 896:	95 30       	cpi	r25, 0x05	; 5
 898:	58 f5       	brcc	.+86     	; 0x8f0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 89a:	90 93 e9 00 	sts	0x00E9, r25
 89e:	98 17       	cp	r25, r24
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 8a2:	70 91 ec 00 	lds	r23, 0x00EC
 8a6:	20 91 ed 00 	lds	r18, 0x00ED
 8aa:	50 91 f0 00 	lds	r21, 0x00F0
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <Endpoint_ConfigureEndpoint_Prv+0x22>
 8b0:	24 2f       	mov	r18, r20
 8b2:	76 2f       	mov	r23, r22
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	21 ff       	sbrs	r18, 1
 8b8:	19 c0       	rjmp	.+50     	; 0x8ec <Endpoint_ConfigureEndpoint_Prv+0x58>
 8ba:	30 91 eb 00 	lds	r19, 0x00EB
 8be:	3e 7f       	andi	r19, 0xFE	; 254
 8c0:	30 93 eb 00 	sts	0x00EB, r19
 8c4:	30 91 ed 00 	lds	r19, 0x00ED
 8c8:	3d 7f       	andi	r19, 0xFD	; 253
 8ca:	30 93 ed 00 	sts	0x00ED, r19
 8ce:	30 91 eb 00 	lds	r19, 0x00EB
 8d2:	31 60       	ori	r19, 0x01	; 1
 8d4:	30 93 eb 00 	sts	0x00EB, r19
 8d8:	70 93 ec 00 	sts	0x00EC, r23
 8dc:	20 93 ed 00 	sts	0x00ED, r18
 8e0:	50 93 f0 00 	sts	0x00F0, r21
 8e4:	20 91 ee 00 	lds	r18, 0x00EE
 8e8:	27 ff       	sbrs	r18, 7
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <Endpoint_ConfigureEndpoint_Prv+0x66>
 8ec:	9f 5f       	subi	r25, 0xFF	; 255
 8ee:	d3 cf       	rjmp	.-90     	; 0x896 <Endpoint_ConfigureEndpoint_Prv+0x2>
 8f0:	8f 70       	andi	r24, 0x0F	; 15
 8f2:	80 93 e9 00 	sts	0x00E9, r24
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	08 95       	ret

000008fe <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 8fe:	80 91 15 01 	lds	r24, 0x0115
 902:	87 fd       	sbrc	r24, 7
 904:	05 c0       	rjmp	.+10     	; 0x910 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 906:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 90a:	80 ff       	sbrs	r24, 0
 90c:	0e c0       	rjmp	.+28     	; 0x92a <Endpoint_ClearStatusStage+0x2c>
 90e:	12 c0       	rjmp	.+36     	; 0x934 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 910:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 914:	82 fd       	sbrc	r24, 2
 916:	05 c0       	rjmp	.+10     	; 0x922 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 918:	80 91 14 01 	lds	r24, 0x0114
 91c:	81 11       	cpse	r24, r1
 91e:	f8 cf       	rjmp	.-16     	; 0x910 <Endpoint_ClearStatusStage+0x12>
 920:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 922:	80 91 e8 00 	lds	r24, 0x00E8
 926:	8b 77       	andi	r24, 0x7B	; 123
 928:	08 c0       	rjmp	.+16     	; 0x93a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 92a:	80 91 14 01 	lds	r24, 0x0114
 92e:	81 11       	cpse	r24, r1
 930:	ea cf       	rjmp	.-44     	; 0x906 <Endpoint_ClearStatusStage+0x8>
 932:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 934:	80 91 e8 00 	lds	r24, 0x00E8
 938:	8e 77       	andi	r24, 0x7E	; 126
 93a:	80 93 e8 00 	sts	0x00E8, r24
 93e:	08 95       	ret

00000940 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 940:	80 91 e4 00 	lds	r24, 0x00E4
 944:	90 91 e5 00 	lds	r25, 0x00E5
 948:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 94a:	20 91 ec 00 	lds	r18, 0x00EC
 94e:	20 ff       	sbrs	r18, 0
 950:	21 c0       	rjmp	.+66     	; 0x994 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 952:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 956:	20 fd       	sbrc	r18, 0
 958:	21 c0       	rjmp	.+66     	; 0x99c <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 95a:	20 91 14 01 	lds	r18, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 95e:	22 23       	and	r18, r18
 960:	89 f0       	breq	.+34     	; 0x984 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 962:	25 30       	cpi	r18, 0x05	; 5
 964:	89 f0       	breq	.+34     	; 0x988 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 966:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 96a:	25 fd       	sbrc	r18, 5
 96c:	0f c0       	rjmp	.+30     	; 0x98c <Endpoint_WaitUntilReady+0x4c>
 96e:	20 91 e4 00 	lds	r18, 0x00E4
 972:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 976:	28 17       	cp	r18, r24
 978:	39 07       	cpc	r19, r25
 97a:	39 f3       	breq	.-50     	; 0x94a <Endpoint_WaitUntilReady+0xa>
 97c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 97e:	41 f0       	breq	.+16     	; 0x990 <Endpoint_WaitUntilReady+0x50>
 980:	c9 01       	movw	r24, r18
 982:	e3 cf       	rjmp	.-58     	; 0x94a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 988:	83 e0       	ldi	r24, 0x03	; 3
 98a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 990:	84 e0       	ldi	r24, 0x04	; 4
 992:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 994:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 998:	22 ff       	sbrs	r18, 2
 99a:	df cf       	rjmp	.-66     	; 0x95a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	08 95       	ret

000009a0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 9a0:	41 d0       	rcall	.+130    	; 0xa24 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 9a2:	43 d0       	rcall	.+134    	; 0xa2a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9a4:	80 91 d8 00 	lds	r24, 0x00D8
 9a8:	8f 77       	andi	r24, 0x7F	; 127
 9aa:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 9ae:	80 91 d8 00 	lds	r24, 0x00D8
 9b2:	80 68       	ori	r24, 0x80	; 128
 9b4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9b8:	80 91 d8 00 	lds	r24, 0x00D8
 9bc:	8f 7d       	andi	r24, 0xDF	; 223
 9be:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9c2:	84 e0       	ldi	r24, 0x04	; 4
 9c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9c6:	86 e0       	ldi	r24, 0x06	; 6
 9c8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9ca:	09 b4       	in	r0, 0x29	; 41
 9cc:	00 fe       	sbrs	r0, 0
 9ce:	fd cf       	rjmp	.-6      	; 0x9ca <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9d0:	10 92 14 01 	sts	0x0114, r1
	USB_Device_ConfigurationNumber  = 0;
 9d4:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 9d8:	10 92 12 01 	sts	0x0112, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 9dc:	10 92 11 01 	sts	0x0111, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9e0:	42 e0       	ldi	r20, 0x02	; 2
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	56 df       	rcall	.-340    	; 0x894 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9e8:	80 91 e1 00 	lds	r24, 0x00E1
 9ec:	8e 7f       	andi	r24, 0xFE	; 254
 9ee:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9f2:	80 91 e2 00 	lds	r24, 0x00E2
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 9fc:	80 91 e2 00 	lds	r24, 0x00E2
 a00:	88 60       	ori	r24, 0x08	; 8
 a02:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 a06:	80 91 e0 00 	lds	r24, 0x00E0
 a0a:	8e 7f       	andi	r24, 0xFE	; 254
 a0c:	80 93 e0 00 	sts	0x00E0, r24
 a10:	08 95       	ret

00000a12 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 a12:	e3 e6       	ldi	r30, 0x63	; 99
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	8e 7f       	andi	r24, 0xFE	; 254
 a1a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
 a22:	be cf       	rjmp	.-132    	; 0x9a0 <USB_ResetInterface>

00000a24 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a24:	10 92 e2 00 	sts	0x00E2, r1
 a28:	08 95       	ret

00000a2a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a2a:	10 92 e1 00 	sts	0x00E1, r1
 a2e:	08 95       	ret

00000a30 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a52:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a56:	82 ff       	sbrs	r24, 2
 a58:	0a c0       	rjmp	.+20     	; 0xa6e <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a5a:	80 91 e2 00 	lds	r24, 0x00E2
 a5e:	82 ff       	sbrs	r24, 2
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a62:	80 91 e1 00 	lds	r24, 0x00E1
 a66:	8b 7f       	andi	r24, 0xFB	; 251
 a68:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a6c:	d6 d1       	rcall	.+940    	; 0xe1a <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a6e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a72:	80 ff       	sbrs	r24, 0
 a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a76:	80 91 e2 00 	lds	r24, 0x00E2
 a7a:	80 ff       	sbrs	r24, 0
 a7c:	13 c0       	rjmp	.+38     	; 0xaa4 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a7e:	80 91 e2 00 	lds	r24, 0x00E2
 a82:	8e 7f       	andi	r24, 0xFE	; 254
 a84:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a88:	80 91 e2 00 	lds	r24, 0x00E2
 a8c:	80 61       	ori	r24, 0x10	; 16
 a8e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a92:	80 91 d8 00 	lds	r24, 0x00D8
 a96:	80 62       	ori	r24, 0x20	; 32
 a98:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a9c:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 a9e:	10 92 14 01 	sts	0x0114, r1
		EVENT_USB_Device_Disconnect();
 aa2:	96 db       	rcall	.-2260   	; 0x1d0 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 aa4:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 aa8:	84 ff       	sbrs	r24, 4
 aaa:	2f c0       	rjmp	.+94     	; 0xb0a <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 aac:	80 91 e2 00 	lds	r24, 0x00E2
 ab0:	84 ff       	sbrs	r24, 4
 ab2:	2b c0       	rjmp	.+86     	; 0xb0a <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 ab4:	84 e0       	ldi	r24, 0x04	; 4
 ab6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 ab8:	86 e0       	ldi	r24, 0x06	; 6
 aba:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 abc:	09 b4       	in	r0, 0x29	; 41
 abe:	00 fe       	sbrs	r0, 0
 ac0:	fd cf       	rjmp	.-6      	; 0xabc <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 ac2:	80 91 d8 00 	lds	r24, 0x00D8
 ac6:	8f 7d       	andi	r24, 0xDF	; 223
 ac8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 acc:	80 91 e1 00 	lds	r24, 0x00E1
 ad0:	8f 7e       	andi	r24, 0xEF	; 239
 ad2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 ad6:	80 91 e2 00 	lds	r24, 0x00E2
 ada:	8f 7e       	andi	r24, 0xEF	; 239
 adc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 ae0:	80 91 e2 00 	lds	r24, 0x00E2
 ae4:	81 60       	ori	r24, 0x01	; 1
 ae6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 aea:	80 91 10 01 	lds	r24, 0x0110
 aee:	88 23       	and	r24, r24
 af0:	11 f0       	breq	.+4      	; 0xaf6 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 af2:	84 e0       	ldi	r24, 0x04	; 4
 af4:	07 c0       	rjmp	.+14     	; 0xb04 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 af6:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 afa:	87 ff       	sbrs	r24, 7
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <__vector_11+0xd2>
 afe:	83 e0       	ldi	r24, 0x03	; 3
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <__vector_11+0xd4>
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	80 93 14 01 	sts	0x0114, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 b08:	5e db       	rcall	.-2372   	; 0x1c6 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b0a:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b0e:	83 ff       	sbrs	r24, 3
 b10:	22 c0       	rjmp	.+68     	; 0xb56 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b12:	80 91 e2 00 	lds	r24, 0x00E2
 b16:	83 ff       	sbrs	r24, 3
 b18:	1e c0       	rjmp	.+60     	; 0xb56 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b1a:	80 91 e1 00 	lds	r24, 0x00E1
 b1e:	87 7f       	andi	r24, 0xF7	; 247
 b20:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b24:	82 e0       	ldi	r24, 0x02	; 2
 b26:	80 93 14 01 	sts	0x0114, r24
		USB_Device_ConfigurationNumber = 0;
 b2a:	10 92 10 01 	sts	0x0110, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b2e:	80 91 e1 00 	lds	r24, 0x00E1
 b32:	8e 7f       	andi	r24, 0xFE	; 254
 b34:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b38:	80 91 e2 00 	lds	r24, 0x00E2
 b3c:	8e 7f       	andi	r24, 0xFE	; 254
 b3e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b42:	80 91 e2 00 	lds	r24, 0x00E2
 b46:	80 61       	ori	r24, 0x10	; 16
 b48:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b4c:	42 e0       	ldi	r20, 0x02	; 2
 b4e:	60 e0       	ldi	r22, 0x00	; 0
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	a0 de       	rcall	.-704    	; 0x894 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b54:	62 d1       	rcall	.+708    	; 0xe1a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b56:	ff 91       	pop	r31
 b58:	ef 91       	pop	r30
 b5a:	bf 91       	pop	r27
 b5c:	af 91       	pop	r26
 b5e:	9f 91       	pop	r25
 b60:	8f 91       	pop	r24
 b62:	7f 91       	pop	r23
 b64:	6f 91       	pop	r22
 b66:	5f 91       	pop	r21
 b68:	4f 91       	pop	r20
 b6a:	3f 91       	pop	r19
 b6c:	2f 91       	pop	r18
 b6e:	0f 90       	pop	r0
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	0f 90       	pop	r0
 b74:	1f 90       	pop	r1
 b76:	18 95       	reti

00000b78 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b78:	1f 93       	push	r17
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
 b82:	aa 97       	sbiw	r28, 0x2a	; 42
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	e5 e1       	ldi	r30, 0x15	; 21
 b90:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b92:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b96:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b98:	21 e0       	ldi	r18, 0x01	; 1
 b9a:	ed 31       	cpi	r30, 0x1D	; 29
 b9c:	f2 07       	cpc	r31, r18
 b9e:	c9 f7       	brne	.-14     	; 0xb92 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 ba0:	3c d1       	rcall	.+632    	; 0xe1a <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 ba6:	83 ff       	sbrs	r24, 3
 ba8:	20 c1       	rjmp	.+576    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 baa:	90 91 15 01 	lds	r25, 0x0115

		switch (USB_ControlRequest.bRequest)
 bae:	80 91 16 01 	lds	r24, 0x0116
 bb2:	85 30       	cpi	r24, 0x05	; 5
 bb4:	09 f4       	brne	.+2      	; 0xbb8 <USB_Device_ProcessControlRequest+0x40>
 bb6:	77 c0       	rjmp	.+238    	; 0xca6 <USB_Device_ProcessControlRequest+0x12e>
 bb8:	30 f4       	brcc	.+12     	; 0xbc6 <USB_Device_ProcessControlRequest+0x4e>
 bba:	81 30       	cpi	r24, 0x01	; 1
 bbc:	81 f1       	breq	.+96     	; 0xc1e <USB_Device_ProcessControlRequest+0xa6>
 bbe:	68 f0       	brcs	.+26     	; 0xbda <USB_Device_ProcessControlRequest+0x62>
 bc0:	83 30       	cpi	r24, 0x03	; 3
 bc2:	69 f1       	breq	.+90     	; 0xc1e <USB_Device_ProcessControlRequest+0xa6>
 bc4:	12 c1       	rjmp	.+548    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
 bc6:	88 30       	cpi	r24, 0x08	; 8
 bc8:	09 f4       	brne	.+2      	; 0xbcc <USB_Device_ProcessControlRequest+0x54>
 bca:	e1 c0       	rjmp	.+450    	; 0xd8e <USB_Device_ProcessControlRequest+0x216>
 bcc:	89 30       	cpi	r24, 0x09	; 9
 bce:	09 f4       	brne	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x5a>
 bd0:	f0 c0       	rjmp	.+480    	; 0xdb2 <USB_Device_ProcessControlRequest+0x23a>
 bd2:	86 30       	cpi	r24, 0x06	; 6
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x60>
 bd6:	09 c1       	rjmp	.+530    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
 bd8:	88 c0       	rjmp	.+272    	; 0xcea <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bda:	90 38       	cpi	r25, 0x80	; 128
 bdc:	81 f0       	breq	.+32     	; 0xbfe <USB_Device_ProcessControlRequest+0x86>
 bde:	92 38       	cpi	r25, 0x82	; 130
 be0:	09 f0       	breq	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x6c>
 be2:	03 c1       	rjmp	.+518    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 be4:	80 91 19 01 	lds	r24, 0x0119
 be8:	8f 70       	andi	r24, 0x0F	; 15
 bea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bee:	80 91 eb 00 	lds	r24, 0x00EB
 bf2:	85 fb       	bst	r24, 5
 bf4:	88 27       	eor	r24, r24
 bf6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bf8:	10 92 e9 00 	sts	0x00E9, r1
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 bfe:	80 91 11 01 	lds	r24, 0x0111
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c02:	90 91 12 01 	lds	r25, 0x0112
 c06:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c08:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0a:	90 91 e8 00 	lds	r25, 0x00E8
 c0e:	97 7f       	andi	r25, 0xF7	; 247
 c10:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c14:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 c18:	10 92 f1 00 	sts	0x00F1, r1
 c1c:	c3 c0       	rjmp	.+390    	; 0xda4 <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c1e:	29 2f       	mov	r18, r25
 c20:	2d 7f       	andi	r18, 0xFD	; 253
 c22:	09 f0       	breq	.+2      	; 0xc26 <USB_Device_ProcessControlRequest+0xae>
 c24:	e2 c0       	rjmp	.+452    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c26:	99 23       	and	r25, r25
 c28:	19 f0       	breq	.+6      	; 0xc30 <USB_Device_ProcessControlRequest+0xb8>
 c2a:	92 30       	cpi	r25, 0x02	; 2
 c2c:	61 f0       	breq	.+24     	; 0xc46 <USB_Device_ProcessControlRequest+0xce>
 c2e:	dd c0       	rjmp	.+442    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c30:	90 91 17 01 	lds	r25, 0x0117
 c34:	91 30       	cpi	r25, 0x01	; 1
 c36:	09 f0       	breq	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0xc2>
 c38:	d8 c0       	rjmp	.+432    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c3a:	83 30       	cpi	r24, 0x03	; 3
 c3c:	09 f0       	breq	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0xc8>
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	90 93 12 01 	sts	0x0112, r25
 c44:	2a c0       	rjmp	.+84     	; 0xc9a <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c46:	90 91 17 01 	lds	r25, 0x0117
 c4a:	91 11       	cpse	r25, r1
 c4c:	26 c0       	rjmp	.+76     	; 0xc9a <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c4e:	20 91 19 01 	lds	r18, 0x0119
 c52:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 c54:	09 f4       	brne	.+2      	; 0xc58 <USB_Device_ProcessControlRequest+0xe0>
 c56:	c9 c0       	rjmp	.+402    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c58:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c5c:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c60:	90 ff       	sbrs	r25, 0
 c62:	1b c0       	rjmp	.+54     	; 0xc9a <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c64:	83 30       	cpi	r24, 0x03	; 3
 c66:	21 f4       	brne	.+8      	; 0xc70 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c68:	80 91 eb 00 	lds	r24, 0x00EB
 c6c:	80 62       	ori	r24, 0x20	; 32
 c6e:	13 c0       	rjmp	.+38     	; 0xc96 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c70:	80 91 eb 00 	lds	r24, 0x00EB
 c74:	80 61       	ori	r24, 0x10	; 16
 c76:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	02 2e       	mov	r0, r18
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <USB_Device_ProcessControlRequest+0x10c>
 c82:	88 0f       	add	r24, r24
 c84:	0a 94       	dec	r0
 c86:	ea f7       	brpl	.-6      	; 0xc82 <USB_Device_ProcessControlRequest+0x10a>
 c88:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 c8c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c90:	80 91 eb 00 	lds	r24, 0x00EB
 c94:	88 60       	ori	r24, 0x08	; 8
 c96:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c9a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c9e:	80 91 e8 00 	lds	r24, 0x00E8
 ca2:	87 7f       	andi	r24, 0xF7	; 247
 ca4:	82 c0       	rjmp	.+260    	; 0xdaa <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ca6:	91 11       	cpse	r25, r1
 ca8:	a0 c0       	rjmp	.+320    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 caa:	10 91 17 01 	lds	r17, 0x0117
 cae:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 cb0:	80 91 e3 00 	lds	r24, 0x00E3
 cb4:	80 78       	andi	r24, 0x80	; 128
 cb6:	81 2b       	or	r24, r17
 cb8:	80 93 e3 00 	sts	0x00E3, r24
 cbc:	80 91 e8 00 	lds	r24, 0x00E8
 cc0:	87 7f       	andi	r24, 0xF7	; 247
 cc2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 cc6:	1b de       	rcall	.-970    	; 0x8fe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cc8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 ccc:	80 ff       	sbrs	r24, 0
 cce:	fc cf       	rjmp	.-8      	; 0xcc8 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 cd0:	80 91 e3 00 	lds	r24, 0x00E3
 cd4:	80 68       	ori	r24, 0x80	; 128
 cd6:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 cda:	11 23       	and	r17, r17
 cdc:	11 f0       	breq	.+4      	; 0xce2 <USB_Device_ProcessControlRequest+0x16a>
 cde:	83 e0       	ldi	r24, 0x03	; 3
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <USB_Device_ProcessControlRequest+0x16c>
 ce2:	82 e0       	ldi	r24, 0x02	; 2
 ce4:	80 93 14 01 	sts	0x0114, r24
 ce8:	80 c0       	rjmp	.+256    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cea:	90 58       	subi	r25, 0x80	; 128
 cec:	92 30       	cpi	r25, 0x02	; 2
 cee:	08 f0       	brcs	.+2      	; 0xcf2 <USB_Device_ProcessControlRequest+0x17a>
 cf0:	7c c0       	rjmp	.+248    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cf2:	80 91 17 01 	lds	r24, 0x0117
 cf6:	90 91 18 01 	lds	r25, 0x0118
 cfa:	8c 3d       	cpi	r24, 0xDC	; 220
 cfc:	23 e0       	ldi	r18, 0x03	; 3
 cfe:	92 07       	cpc	r25, r18
 d00:	71 f5       	brne	.+92     	; 0xd5e <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d02:	83 e0       	ldi	r24, 0x03	; 3
 d04:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d06:	8a e2       	ldi	r24, 0x2A	; 42
 d08:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d0a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d0c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d0e:	de 01       	movw	r26, r28
 d10:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d12:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d14:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d16:	51 e2       	ldi	r21, 0x21	; 33
 d18:	e3 2f       	mov	r30, r19
 d1a:	f0 e0       	ldi	r31, 0x00	; 0
 d1c:	50 93 57 00 	sts	0x0057, r21
 d20:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 d22:	20 ff       	sbrs	r18, 0
 d24:	03 c0       	rjmp	.+6      	; 0xd2c <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
 d26:	e2 95       	swap	r30
 d28:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d2a:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d2c:	ef 70       	andi	r30, 0x0F	; 15
 d2e:	8e 2f       	mov	r24, r30
 d30:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d32:	ea 30       	cpi	r30, 0x0A	; 10
 d34:	10 f0       	brcs	.+4      	; 0xd3a <USB_Device_ProcessControlRequest+0x1c2>
 d36:	c7 96       	adiw	r24, 0x37	; 55
 d38:	01 c0       	rjmp	.+2      	; 0xd3c <USB_Device_ProcessControlRequest+0x1c4>
 d3a:	c0 96       	adiw	r24, 0x30	; 48
 d3c:	8d 93       	st	X+, r24
 d3e:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d40:	2f 5f       	subi	r18, 0xFF	; 255
 d42:	24 31       	cpi	r18, 0x14	; 20
 d44:	49 f7       	brne	.-46     	; 0xd18 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d46:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d48:	80 91 e8 00 	lds	r24, 0x00E8
 d4c:	87 7f       	andi	r24, 0xF7	; 247
 d4e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d52:	6a e2       	ldi	r22, 0x2A	; 42
 d54:	70 e0       	ldi	r23, 0x00	; 0
 d56:	ce 01       	movw	r24, r28
 d58:	01 96       	adiw	r24, 0x01	; 1
 d5a:	d5 dc       	rcall	.-1622   	; 0x706 <Endpoint_Write_Control_Stream_LE>
 d5c:	12 c0       	rjmp	.+36     	; 0xd82 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d5e:	ae 01       	movw	r20, r28
 d60:	4f 5f       	subi	r20, 0xFF	; 255
 d62:	5f 4f       	sbci	r21, 0xFF	; 255
 d64:	60 91 19 01 	lds	r22, 0x0119
 d68:	0c dc       	rcall	.-2024   	; 0x582 <CALLBACK_USB_GetDescriptor>
 d6a:	00 97       	sbiw	r24, 0x00	; 0
 d6c:	09 f4       	brne	.+2      	; 0xd70 <USB_Device_ProcessControlRequest+0x1f8>
 d6e:	3d c0       	rjmp	.+122    	; 0xdea <USB_Device_ProcessControlRequest+0x272>
 d70:	20 91 e8 00 	lds	r18, 0x00E8
 d74:	27 7f       	andi	r18, 0xF7	; 247
 d76:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d7a:	bc 01       	movw	r22, r24
 d7c:	89 81       	ldd	r24, Y+1	; 0x01
 d7e:	9a 81       	ldd	r25, Y+2	; 0x02
 d80:	25 dd       	rcall	.-1462   	; 0x7cc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d82:	80 91 e8 00 	lds	r24, 0x00E8
 d86:	8b 77       	andi	r24, 0x7B	; 123
 d88:	80 93 e8 00 	sts	0x00E8, r24
 d8c:	2e c0       	rjmp	.+92     	; 0xdea <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d8e:	90 38       	cpi	r25, 0x80	; 128
 d90:	61 f5       	brne	.+88     	; 0xdea <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d92:	80 91 e8 00 	lds	r24, 0x00E8
 d96:	87 7f       	andi	r24, 0xF7	; 247
 d98:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d9c:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 da0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 da4:	80 91 e8 00 	lds	r24, 0x00E8
 da8:	8e 77       	andi	r24, 0x7E	; 126
 daa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 dae:	a7 dd       	rcall	.-1202   	; 0x8fe <Endpoint_ClearStatusStage>
 db0:	1c c0       	rjmp	.+56     	; 0xdea <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 db2:	91 11       	cpse	r25, r1
 db4:	1a c0       	rjmp	.+52     	; 0xdea <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 db6:	90 91 17 01 	lds	r25, 0x0117
 dba:	92 30       	cpi	r25, 0x02	; 2
 dbc:	b0 f4       	brcc	.+44     	; 0xdea <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dbe:	80 91 e8 00 	lds	r24, 0x00E8
 dc2:	87 7f       	andi	r24, 0xF7	; 247
 dc4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 dc8:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
 dcc:	98 dd       	rcall	.-1232   	; 0x8fe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 dce:	80 91 10 01 	lds	r24, 0x0110
 dd2:	81 11       	cpse	r24, r1
 dd4:	04 c0       	rjmp	.+8      	; 0xdde <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 dd6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 dda:	87 ff       	sbrs	r24, 7
 ddc:	02 c0       	rjmp	.+4      	; 0xde2 <USB_Device_ProcessControlRequest+0x26a>
 dde:	84 e0       	ldi	r24, 0x04	; 4
 de0:	01 c0       	rjmp	.+2      	; 0xde4 <USB_Device_ProcessControlRequest+0x26c>
 de2:	81 e0       	ldi	r24, 0x01	; 1
 de4:	80 93 14 01 	sts	0x0114, r24

	EVENT_USB_Device_ConfigurationChanged();
 de8:	f8 d9       	rcall	.-3088   	; 0x1da <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dea:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 dee:	83 ff       	sbrs	r24, 3
 df0:	0a c0       	rjmp	.+20     	; 0xe06 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 df2:	80 91 e8 00 	lds	r24, 0x00E8
 df6:	87 7f       	andi	r24, 0xF7	; 247
 df8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 dfc:	80 91 eb 00 	lds	r24, 0x00EB
 e00:	80 62       	ori	r24, 0x20	; 32
 e02:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e06:	aa 96       	adiw	r28, 0x2a	; 42
 e08:	0f b6       	in	r0, 0x3f	; 63
 e0a:	f8 94       	cli
 e0c:	de bf       	out	0x3e, r29	; 62
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	cd bf       	out	0x3d, r28	; 61
 e12:	df 91       	pop	r29
 e14:	cf 91       	pop	r28
 e16:	1f 91       	pop	r17
 e18:	08 95       	ret

00000e1a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 e1a:	08 95       	ret

00000e1c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e1c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e1e:	80 91 14 01 	lds	r24, 0x0114
 e22:	88 23       	and	r24, r24
 e24:	a9 f0       	breq	.+42     	; 0xe50 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e26:	80 91 e9 00 	lds	r24, 0x00E9
 e2a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e2c:	90 91 ec 00 	lds	r25, 0x00EC
 e30:	90 ff       	sbrs	r25, 0
 e32:	02 c0       	rjmp	.+4      	; 0xe38 <USB_USBTask+0x1c>
 e34:	90 e8       	ldi	r25, 0x80	; 128
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <USB_USBTask+0x1e>
 e38:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e3a:	c9 2f       	mov	r28, r25
 e3c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e42:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 e46:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 e48:	97 de       	rcall	.-722    	; 0xb78 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e4a:	cf 70       	andi	r28, 0x0F	; 15
 e4c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e50:	cf 91       	pop	r28
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
