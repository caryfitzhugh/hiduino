
arduino_midi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000e5e  00000ef2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  00000ef2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d8  00000000  00000000  00000f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005a04  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015d3  00000000  00000000  00006ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d12  00000000  00000000  000082b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000928  00000000  00000000  0000bfcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002b8d  00000000  00000000  0000c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e23  00000000  00000000  0000f481  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000570  00000000  00000000  000132a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
   2:	00 00       	nop
   4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
   6:	00 00       	nop
   8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
   a:	00 00       	nop
   c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
   e:	00 00       	nop
  10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
  12:	00 00       	nop
  14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
  16:	00 00       	nop
  18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
  22:	00 00       	nop
  24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
  26:	00 00       	nop
  28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	04 c5       	rjmp	.+2568   	; 0xa36 <__vector_11>
  2e:	00 00       	nop
  30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
  32:	00 00       	nop
  34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
  36:	00 00       	nop
  38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
  3e:	00 00       	nop
  40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
  42:	00 00       	nop
  44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
  46:	00 00       	nop
  48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
  4e:	00 00       	nop
  50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
  56:	00 00       	nop
  58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8b c1       	rjmp	.+790    	; 0x374 <__vector_23>
  5e:	00 00       	nop
  60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
  62:	00 00       	nop
  64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
  66:	00 00       	nop
  68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
  6e:	00 00       	nop
  70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	1a 03 61 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..a.r.d.u.i.n.o.
  84:	5f 00 6d 00 69 00 64 00 69 00 00 00                 _.m.i.d.i...

00000090 <ManufacturerString>:
  90:	20 03 68 00 69 00 64 00 75 00 69 00 6e 00 6f 00      .h.i.d.u.i.n.o.
  a0:	20 00 70 00 72 00 6f 00 6a 00 65 00 63 00 74 00      .p.r.o.j.e.c.t.
  b0:	00 00                                               ..

000000b2 <LanguageString>:
  b2:	04 03 09 04                                         ....

000000b6 <ConfigurationDescriptor>:
  b6:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  c6:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  d6:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  e6:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  f6:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
 106:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 116:	05 25 01 01 03                                      .%...

0000011b <DeviceDescriptor>:
 11b:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
 12b:	00 01 00                                            ...

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d2 e0       	ldi	r29, 0x02	; 2
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	ee e5       	ldi	r30, 0x5E	; 94
 142:	fe e0       	ldi	r31, 0x0E	; 14
 144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
 146:	05 90       	lpm	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	a0 30       	cpi	r26, 0x00	; 0
 14c:	b1 07       	cpc	r27, r17
 14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b1 e0       	ldi	r27, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
 158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
 15a:	ad 31       	cpi	r26, 0x1D	; 29
 15c:	b2 07       	cpc	r27, r18
 15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
 160:	c8 d0       	rcall	.+400    	; 0x2f2 <main>
 162:	7b c6       	rjmp	.+3318   	; 0xe5a <_exit>

00000164 <__bad_interrupt>:
 164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <SetupHardware>:
}

uint8_t getChannelFromStatusByte(uint8_t inStatus)
{
	return (inStatus & 0x0f) + 1;
}
 166:	84 b7       	in	r24, 0x34	; 52
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	84 bf       	out	0x34, r24	; 52
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	80 93 60 00 	sts	0x0060, r24
 176:	10 92 60 00 	sts	0x0060, r1
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 cd 00 	sts	0x00CD, r25
 184:	80 93 cc 00 	sts	0x00CC, r24
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	80 93 ca 00 	sts	0x00CA, r24
 18e:	10 92 c8 00 	sts	0x00C8, r1
 192:	e9 ec       	ldi	r30, 0xC9	; 201
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	88 e1       	ldi	r24, 0x18	; 24
 198:	80 83       	st	Z, r24
 19a:	53 9a       	sbi	0x0a, 3	; 10
 19c:	5a 9a       	sbi	0x0b, 2	; 11
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	85 bd       	out	0x25, r24	; 37
 1a2:	10 82       	st	Z, r1
 1a4:	88 e9       	ldi	r24, 0x98	; 152
 1a6:	80 83       	st	Z, r24
 1a8:	46 9a       	sbi	0x08, 6	; 8
 1aa:	3e 9a       	sbi	0x07, 6	; 7
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	80 93 61 00 	sts	0x0061, r24
 1b8:	90 93 61 00 	sts	0x0061, r25
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	80 63       	ori	r24, 0x30	; 48
 1c2:	8a b9       	out	0x0a, r24	; 10
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	80 63       	ori	r24, 0x30	; 48
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	26 c4       	rjmp	.+2124   	; 0xa18 <USB_Init>

000001cc <EVENT_USB_Device_Connect>:
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	80 63       	ori	r24, 0x30	; 48
 1d0:	8f 7e       	andi	r24, 0xEF	; 239
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	08 95       	ret

000001d6 <EVENT_USB_Device_Disconnect>:
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	80 63       	ori	r24, 0x30	; 48
 1da:	8f 7d       	andi	r24, 0xDF	; 223
 1dc:	8b b9       	out	0x0b, r24	; 11
 1de:	08 95       	ret

000001e0 <EVENT_USB_Device_ConfigurationChanged>:
 1e0:	cf 93       	push	r28
 1e2:	42 e3       	ldi	r20, 0x32	; 50
 1e4:	61 e8       	ldi	r22, 0x81	; 129
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	58 d3       	rcall	.+1712   	; 0x89a <Endpoint_ConfigureEndpoint_Prv>
 1ea:	c8 2f       	mov	r28, r24
 1ec:	42 e3       	ldi	r20, 0x32	; 50
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	53 d3       	rcall	.+1702   	; 0x89a <Endpoint_ConfigureEndpoint_Prv>
 1f4:	88 23       	and	r24, r24
 1f6:	21 f0       	breq	.+8      	; 0x200 <EVENT_USB_Device_ConfigurationChanged+0x20>
 1f8:	cc 23       	and	r28, r28
 1fa:	11 f0       	breq	.+4      	; 0x200 <EVENT_USB_Device_ConfigurationChanged+0x20>
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x22>
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	80 95       	com	r24
 206:	90 63       	ori	r25, 0x30	; 48
 208:	89 23       	and	r24, r25
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <MIDI_To_Host>:
 210:	80 91 14 01 	lds	r24, 0x0114
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	41 f5       	brne	.+80     	; 0x268 <MIDI_To_Host+0x58>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 e9 00 	sts	0x00E9, r24
 21e:	80 91 e8 00 	lds	r24, 0x00E8
 222:	80 ff       	sbrs	r24, 0
 224:	21 c0       	rjmp	.+66     	; 0x268 <MIDI_To_Host+0x58>
 226:	80 91 08 01 	lds	r24, 0x0108
 22a:	88 23       	and	r24, r24
 22c:	e9 f0       	breq	.+58     	; 0x268 <MIDI_To_Host+0x58>
 22e:	10 92 08 01 	sts	0x0108, r1
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	d6 d1       	rcall	.+940    	; 0x5ec <Endpoint_Write_Stream_LE>
 240:	10 92 04 01 	sts	0x0104, r1
 244:	10 92 05 01 	sts	0x0105, r1
 248:	10 92 06 01 	sts	0x0106, r1
 24c:	10 92 07 01 	sts	0x0107, r1
 250:	80 91 e8 00 	lds	r24, 0x00E8
 254:	8e 77       	andi	r24, 0x7E	; 126
 256:	80 93 e8 00 	sts	0x00E8, r24
 25a:	5c 98       	cbi	0x0b, 4	; 11
 25c:	88 e8       	ldi	r24, 0x88	; 136
 25e:	93 e1       	ldi	r25, 0x13	; 19
 260:	90 93 03 01 	sts	0x0103, r25
 264:	80 93 02 01 	sts	0x0102, r24
 268:	08 95       	ret

0000026a <MIDI_To_Arduino>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <MIDI_To_Arduino+0x6>
 270:	00 d0       	rcall	.+0      	; 0x272 <MIDI_To_Arduino+0x8>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	80 91 14 01 	lds	r24, 0x0114
 27a:	84 30       	cpi	r24, 0x04	; 4
 27c:	99 f5       	brne	.+102    	; 0x2e4 <MIDI_To_Arduino+0x7a>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 e9 00 	sts	0x00E9, r24
 284:	80 91 e8 00 	lds	r24, 0x00E8
 288:	82 ff       	sbrs	r24, 2
 28a:	2c c0       	rjmp	.+88     	; 0x2e4 <MIDI_To_Arduino+0x7a>
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	64 e0       	ldi	r22, 0x04	; 4
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	f1 d1       	rcall	.+994    	; 0x67c <Endpoint_Read_Stream_LE>
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	90 91 c8 00 	lds	r25, 0x00C8
 2a0:	95 ff       	sbrs	r25, 5
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <MIDI_To_Arduino+0x32>
 2a4:	80 93 ce 00 	sts	0x00CE, r24
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	90 91 c8 00 	lds	r25, 0x00C8
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <MIDI_To_Arduino+0x40>
 2b2:	80 93 ce 00 	sts	0x00CE, r24
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	90 91 c8 00 	lds	r25, 0x00C8
 2bc:	95 ff       	sbrs	r25, 5
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <MIDI_To_Arduino+0x4e>
 2c0:	80 93 ce 00 	sts	0x00CE, r24
 2c4:	5d 98       	cbi	0x0b, 5	; 11
 2c6:	88 e8       	ldi	r24, 0x88	; 136
 2c8:	93 e1       	ldi	r25, 0x13	; 19
 2ca:	90 93 01 01 	sts	0x0101, r25
 2ce:	80 93 00 01 	sts	0x0100, r24
 2d2:	80 91 f2 00 	lds	r24, 0x00F2
 2d6:	81 11       	cpse	r24, r1
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <MIDI_To_Arduino+0x7a>
 2da:	80 91 e8 00 	lds	r24, 0x00E8
 2de:	8b 77       	andi	r24, 0x7B	; 123
 2e0:	80 93 e8 00 	sts	0x00E8, r24
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <main>:
 2f2:	39 df       	rcall	.-398    	; 0x166 <SetupHardware>
 2f4:	78 94       	sei
 2f6:	78 94       	sei
 2f8:	80 91 02 01 	lds	r24, 0x0102
 2fc:	90 91 03 01 	lds	r25, 0x0103
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	31 f0       	breq	.+12     	; 0x310 <__stack+0x11>
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	90 93 03 01 	sts	0x0103, r25
 30a:	80 93 02 01 	sts	0x0102, r24
 30e:	01 c0       	rjmp	.+2      	; 0x312 <__stack+0x13>
 310:	5c 9a       	sbi	0x0b, 4	; 11
 312:	80 91 00 01 	lds	r24, 0x0100
 316:	90 91 01 01 	lds	r25, 0x0101
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	31 f0       	breq	.+12     	; 0x32a <__stack+0x2b>
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	90 93 01 01 	sts	0x0101, r25
 324:	80 93 00 01 	sts	0x0100, r24
 328:	01 c0       	rjmp	.+2      	; 0x32c <__stack+0x2d>
 32a:	5d 9a       	sbi	0x0b, 5	; 11
 32c:	9e df       	rcall	.-196    	; 0x26a <MIDI_To_Arduino>
 32e:	70 df       	rcall	.-288    	; 0x210 <MIDI_To_Host>
 330:	78 d5       	rcall	.+2800   	; 0xe22 <USB_USBTask>
 332:	e2 cf       	rjmp	.-60     	; 0x2f8 <main+0x6>

00000334 <getTypeFromStatusByte>:
 334:	87 ff       	sbrs	r24, 7
 336:	0c c0       	rjmp	.+24     	; 0x350 <getTypeFromStatusByte+0x1c>
 338:	9c e0       	ldi	r25, 0x0C	; 12
 33a:	98 0f       	add	r25, r24
 33c:	92 30       	cpi	r25, 0x02	; 2
 33e:	40 f0       	brcs	.+16     	; 0x350 <getTypeFromStatusByte+0x1c>
 340:	98 2f       	mov	r25, r24
 342:	9b 7f       	andi	r25, 0xFB	; 251
 344:	99 3f       	cpi	r25, 0xF9	; 249
 346:	21 f0       	breq	.+8      	; 0x350 <getTypeFromStatusByte+0x1c>
 348:	80 3f       	cpi	r24, 0xF0	; 240
 34a:	18 f4       	brcc	.+6      	; 0x352 <getTypeFromStatusByte+0x1e>
 34c:	80 7f       	andi	r24, 0xF0	; 240
 34e:	08 95       	ret
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret

00000354 <isChannelMessage>:
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
 354:	98 2f       	mov	r25, r24
 356:	9f 7e       	andi	r25, 0xEF	; 239
 358:	28 2f       	mov	r18, r24
 35a:	2f 7c       	andi	r18, 0xCF	; 207
 35c:	20 38       	cpi	r18, 0x80	; 128
 35e:	39 f0       	breq	.+14     	; 0x36e <isChannelMessage+0x1a>
{
    return (inType == NoteOff           ||
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
 360:	80 3e       	cpi	r24, 0xE0	; 224
 362:	29 f0       	breq	.+10     	; 0x36e <isChannelMessage+0x1a>
            inType == PitchBend         ||
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 3c       	cpi	r25, 0xC0	; 192
 368:	19 f0       	breq	.+6      	; 0x370 <isChannelMessage+0x1c>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	01 c0       	rjmp	.+2      	; 0x370 <isChannelMessage+0x1c>
 36e:	81 e0       	ldi	r24, 0x01	; 1
            inType == ProgramChange);
}
 370:	81 70       	andi	r24, 0x01	; 1
 372:	08 95       	ret

00000374 <__vector_23>:

}

// Parse via Arduino/Serial
ISR(USART1_RX_vect, ISR_BLOCK) 
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 39a:	80 91 14 01 	lds	r24, 0x0114
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <__vector_23+0x30>
 3a2:	df c0       	rjmp	.+446    	; 0x562 <__vector_23+0x1ee>

	const uint8_t extracted = UDR1;
 3a4:	c0 91 ce 00 	lds	r28, 0x00CE

	// Borrowed + Modified from Francois Best's Arduino MIDI Library
	// https://github.com/FortySevenEffects/arduino_midi_library
    if (mPendingMessageIndex == 0)
 3a8:	40 91 0b 01 	lds	r20, 0x010B
 3ac:	41 11       	cpse	r20, r1
 3ae:	78 c0       	rjmp	.+240    	; 0x4a0 <__vector_23+0x12c>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
 3b0:	c0 93 0d 01 	sts	0x010D, r28

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
 3b4:	d0 91 0a 01 	lds	r29, 0x010A
 3b8:	8d 2f       	mov	r24, r29
 3ba:	bc df       	rcall	.-136    	; 0x334 <getTypeFromStatusByte>
 3bc:	cb df       	rcall	.-106    	; 0x354 <isChannelMessage>
 3be:	88 23       	and	r24, r24
 3c0:	49 f0       	breq	.+18     	; 0x3d4 <__vector_23+0x60>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it to the pending message
            if (extracted < 0x80)
 3c2:	c7 fd       	sbrc	r28, 7
 3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <__vector_23+0x60>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
 3c6:	d0 93 0d 01 	sts	0x010D, r29
                mPendingMessage[1]   = extracted;
 3ca:	c0 93 0e 01 	sts	0x010E, r28
                mPendingMessageIndex = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 0b 01 	sts	0x010B, r24
            }
            // Else we received another status byte, so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
 3d4:	c0 91 0d 01 	lds	r28, 0x010D
 3d8:	8c 2f       	mov	r24, r28
 3da:	ac df       	rcall	.-168    	; 0x334 <getTypeFromStatusByte>
 3dc:	81 3f       	cpi	r24, 0xF1	; 241
 3de:	91 f1       	breq	.+100    	; 0x444 <__vector_23+0xd0>
 3e0:	88 f4       	brcc	.+34     	; 0x404 <__vector_23+0x90>
 3e2:	80 3b       	cpi	r24, 0xB0	; 176
 3e4:	89 f1       	breq	.+98     	; 0x448 <__vector_23+0xd4>
 3e6:	38 f4       	brcc	.+14     	; 0x3f6 <__vector_23+0x82>
 3e8:	80 39       	cpi	r24, 0x90	; 144
 3ea:	71 f1       	breq	.+92     	; 0x448 <__vector_23+0xd4>
 3ec:	80 3a       	cpi	r24, 0xA0	; 160
 3ee:	61 f1       	breq	.+88     	; 0x448 <__vector_23+0xd4>
 3f0:	80 38       	cpi	r24, 0x80	; 128
 3f2:	69 f5       	brne	.+90     	; 0x44e <__vector_23+0xda>
 3f4:	29 c0       	rjmp	.+82     	; 0x448 <__vector_23+0xd4>
 3f6:	80 3d       	cpi	r24, 0xD0	; 208
 3f8:	29 f1       	breq	.+74     	; 0x444 <__vector_23+0xd0>
 3fa:	80 3e       	cpi	r24, 0xE0	; 224
 3fc:	29 f1       	breq	.+74     	; 0x448 <__vector_23+0xd4>
 3fe:	80 3c       	cpi	r24, 0xC0	; 192
 400:	31 f5       	brne	.+76     	; 0x44e <__vector_23+0xda>
 402:	20 c0       	rjmp	.+64     	; 0x444 <__vector_23+0xd0>
 404:	88 3f       	cpi	r24, 0xF8	; 248
 406:	69 f0       	breq	.+26     	; 0x422 <__vector_23+0xae>
 408:	30 f4       	brcc	.+12     	; 0x416 <__vector_23+0xa2>
 40a:	83 3f       	cpi	r24, 0xF3	; 243
 40c:	d9 f0       	breq	.+54     	; 0x444 <__vector_23+0xd0>
 40e:	e0 f0       	brcs	.+56     	; 0x448 <__vector_23+0xd4>
 410:	86 3f       	cpi	r24, 0xF6	; 246
 412:	39 f0       	breq	.+14     	; 0x422 <__vector_23+0xae>
 414:	1c c0       	rjmp	.+56     	; 0x44e <__vector_23+0xda>
 416:	8a 3f       	cpi	r24, 0xFA	; 250
 418:	d0 f0       	brcs	.+52     	; 0x44e <__vector_23+0xda>
 41a:	8d 3f       	cpi	r24, 0xFD	; 253
 41c:	10 f0       	brcs	.+4      	; 0x422 <__vector_23+0xae>
 41e:	8e 3f       	cpi	r24, 0xFE	; 254
 420:	b0 f0       	brcs	.+44     	; 0x44e <__vector_23+0xda>
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
            	mCompleteMessage.Event 	 = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 422:	8f e0       	ldi	r24, 0x0F	; 15
 424:	80 93 04 01 	sts	0x0104, r24
                mCompleteMessage.Data1   = mPendingMessage[0];
 428:	c0 93 05 01 	sts	0x0105, r28
                mCompleteMessage.Data2   = 0;
 42c:	10 92 06 01 	sts	0x0106, r1
                mCompleteMessage.Data3   = 0;
 430:	10 92 07 01 	sts	0x0107, r1
                mPendingMessageValid  	 = true;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 08 01 	sts	0x0108, r24

                // We still need to reset these
                mPendingMessageIndex = 0;
 43a:	10 92 0b 01 	sts	0x010B, r1
                mPendingMessageExpectedLength = 0;
 43e:	10 92 09 01 	sts	0x0109, r1

                return;
 442:	8f c0       	rjmp	.+286    	; 0x562 <__vector_23+0x1ee>
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	01 c0       	rjmp	.+2      	; 0x44a <__vector_23+0xd6>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
 448:	93 e0       	ldi	r25, 0x03	; 3
 44a:	90 93 09 01 	sts	0x0109, r25
            default:
                // Something bad happened
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 44e:	90 91 0b 01 	lds	r25, 0x010B
 452:	60 91 09 01 	lds	r22, 0x0109
 456:	49 2f       	mov	r20, r25
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	26 2f       	mov	r18, r22
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	31 09       	sbc	r19, r1
 462:	42 17       	cp	r20, r18
 464:	53 07       	cpc	r21, r19
 466:	c4 f0       	brlt	.+48     	; 0x498 <__vector_23+0x124>
        {
            // Reception complete
            mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 468:	82 95       	swap	r24
 46a:	8f 70       	andi	r24, 0x0F	; 15
 46c:	80 93 04 01 	sts	0x0104, r24
            mCompleteMessage.Data1 = mPendingMessage[0]; // status = channel + type
 470:	c0 93 05 01 	sts	0x0105, r28
 			mCompleteMessage.Data2 = mPendingMessage[1];
 474:	80 91 0e 01 	lds	r24, 0x010E
 478:	80 93 06 01 	sts	0x0106, r24

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 47c:	63 30       	cpi	r22, 0x03	; 3
 47e:	29 f4       	brne	.+10     	; 0x48a <__vector_23+0x116>
                mCompleteMessage.Data3 = mPendingMessage[2];
 480:	80 91 0f 01 	lds	r24, 0x010F
 484:	80 93 07 01 	sts	0x0107, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <__vector_23+0x11a>
            else
                mCompleteMessage.Data3 = 0;
 48a:	10 92 07 01 	sts	0x0107, r1

            mPendingMessageIndex = 0;
 48e:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 492:	10 92 09 01 	sts	0x0109, r1
 496:	1b c0       	rjmp	.+54     	; 0x4ce <__vector_23+0x15a>
            return;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	90 93 0b 01 	sts	0x010B, r25
 49e:	61 c0       	rjmp	.+194    	; 0x562 <__vector_23+0x1ee>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
 4a0:	c7 ff       	sbrs	r28, 7
 4a2:	19 c0       	rjmp	.+50     	; 0x4d6 <__vector_23+0x162>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
 4a4:	cd 3f       	cpi	r28, 0xFD	; 253
 4a6:	28 f4       	brcc	.+10     	; 0x4b2 <__vector_23+0x13e>
 4a8:	ca 3f       	cpi	r28, 0xFA	; 250
 4aa:	28 f4       	brcc	.+10     	; 0x4b6 <__vector_23+0x142>
 4ac:	c8 3f       	cpi	r28, 0xF8	; 248
 4ae:	99 f4       	brne	.+38     	; 0x4d6 <__vector_23+0x162>
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__vector_23+0x142>
 4b2:	ce 3f       	cpi	r28, 0xFE	; 254
 4b4:	80 f0       	brcs	.+32     	; 0x4d6 <__vector_23+0x162>
                    // pass it to the structure for being read outside
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.
           		 	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(extracted));
 4b6:	8c 2f       	mov	r24, r28
 4b8:	3d df       	rcall	.-390    	; 0x334 <getTypeFromStatusByte>
 4ba:	82 95       	swap	r24
 4bc:	8f 70       	andi	r24, 0x0F	; 15
 4be:	80 93 04 01 	sts	0x0104, r24
            		mCompleteMessage.Data1 = extracted;
 4c2:	c0 93 05 01 	sts	0x0105, r28
                    mCompleteMessage.Data2 = 0;
 4c6:	10 92 06 01 	sts	0x0106, r1
                    mCompleteMessage.Data3 = 0;
 4ca:	10 92 07 01 	sts	0x0107, r1
                   	mPendingMessageValid   = true;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	80 93 08 01 	sts	0x0108, r24
                    return;
 4d4:	46 c0       	rjmp	.+140    	; 0x562 <__vector_23+0x1ee>
                    break;
            }
        }

        // Add extracted data byte to pending message
        mPendingMessage[mPendingMessageIndex] = extracted;
 4d6:	24 2f       	mov	r18, r20
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	e3 5f       	subi	r30, 0xF3	; 243
 4de:	fe 4f       	sbci	r31, 0xFE	; 254
 4e0:	c0 83       	st	Z, r28

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 4e2:	d0 91 09 01 	lds	r29, 0x0109
 4e6:	8d 2f       	mov	r24, r29
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	28 17       	cp	r18, r24
 4ee:	39 07       	cpc	r19, r25
 4f0:	ac f1       	brlt	.+106    	; 0x55c <__vector_23+0x1e8>
        {

        	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 4f2:	c0 91 0d 01 	lds	r28, 0x010D
 4f6:	8c 2f       	mov	r24, r28
 4f8:	1d df       	rcall	.-454    	; 0x334 <getTypeFromStatusByte>
 4fa:	98 2f       	mov	r25, r24
 4fc:	92 95       	swap	r25
 4fe:	9f 70       	andi	r25, 0x0F	; 15
 500:	90 93 04 01 	sts	0x0104, r25
            mCompleteMessage.Data1 = mPendingMessage[0];
 504:	c0 93 05 01 	sts	0x0105, r28
            mCompleteMessage.Data2 = mPendingMessage[1];
 508:	90 91 0e 01 	lds	r25, 0x010E
 50c:	90 93 06 01 	sts	0x0106, r25

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 510:	d3 30       	cpi	r29, 0x03	; 3
 512:	29 f4       	brne	.+10     	; 0x51e <__vector_23+0x1aa>
                mCompleteMessage.Data3 = mPendingMessage[2];
 514:	90 91 0f 01 	lds	r25, 0x010F
 518:	90 93 07 01 	sts	0x0107, r25
 51c:	02 c0       	rjmp	.+4      	; 0x522 <__vector_23+0x1ae>
            else
                mCompleteMessage.Data3 = 0;
 51e:	10 92 07 01 	sts	0x0107, r1

            // Reset local variables
            mPendingMessageIndex = 0;
 522:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 526:	10 92 09 01 	sts	0x0109, r1
            mPendingMessageValid = true;
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	90 93 08 01 	sts	0x0108, r25

            // Activate running status (if enabled for the received type)
            switch (getTypeFromStatusByte(mPendingMessage[0]))
 530:	80 3b       	cpi	r24, 0xB0	; 176
 532:	71 f0       	breq	.+28     	; 0x550 <__vector_23+0x1dc>
 534:	38 f4       	brcc	.+14     	; 0x544 <__vector_23+0x1d0>
 536:	80 39       	cpi	r24, 0x90	; 144
 538:	59 f0       	breq	.+22     	; 0x550 <__vector_23+0x1dc>
 53a:	80 3a       	cpi	r24, 0xA0	; 160
 53c:	49 f0       	breq	.+18     	; 0x550 <__vector_23+0x1dc>
 53e:	80 38       	cpi	r24, 0x80	; 128
 540:	51 f4       	brne	.+20     	; 0x556 <__vector_23+0x1e2>
 542:	06 c0       	rjmp	.+12     	; 0x550 <__vector_23+0x1dc>
 544:	80 3d       	cpi	r24, 0xD0	; 208
 546:	21 f0       	breq	.+8      	; 0x550 <__vector_23+0x1dc>
 548:	80 3e       	cpi	r24, 0xE0	; 224
 54a:	11 f0       	breq	.+4      	; 0x550 <__vector_23+0x1dc>
 54c:	80 3c       	cpi	r24, 0xC0	; 192
 54e:	19 f4       	brne	.+6      	; 0x556 <__vector_23+0x1e2>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
 550:	c0 93 0a 01 	sts	0x010A, r28
                    break;
 554:	06 c0       	rjmp	.+12     	; 0x562 <__vector_23+0x1ee>

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
 556:	10 92 0a 01 	sts	0x010A, r1
                    break;
 55a:	03 c0       	rjmp	.+6      	; 0x562 <__vector_23+0x1ee>
            return;
        }
        else
        {
            // Not complete? Then update the index of the pending message.
            mPendingMessageIndex++;
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	40 93 0b 01 	sts	0x010B, r20
        }
    }
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 588:	29 2f       	mov	r18, r25
 58a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 58c:	22 30       	cpi	r18, 0x02	; 2
 58e:	31 05       	cpc	r19, r1
 590:	59 f0       	breq	.+22     	; 0x5a8 <CALLBACK_USB_GetDescriptor+0x20>
 592:	23 30       	cpi	r18, 0x03	; 3
 594:	31 05       	cpc	r19, r1
 596:	69 f0       	breq	.+26     	; 0x5b2 <CALLBACK_USB_GetDescriptor+0x2a>
 598:	21 30       	cpi	r18, 0x01	; 1
 59a:	31 05       	cpc	r19, r1
 59c:	f9 f4       	brne	.+62     	; 0x5dc <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 5a2:	2b e1       	ldi	r18, 0x1B	; 27
 5a4:	31 e0       	ldi	r19, 0x01	; 1
 5a6:	1e c0       	rjmp	.+60     	; 0x5e4 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 5a8:	85 e6       	ldi	r24, 0x65	; 101
 5aa:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 5ac:	26 eb       	ldi	r18, 0xB6	; 182
 5ae:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 5b0:	19 c0       	rjmp	.+50     	; 0x5e4 <CALLBACK_USB_GetDescriptor+0x5c>
 5b2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	41 f0       	breq	.+16     	; 0x5ca <CALLBACK_USB_GetDescriptor+0x42>
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	91 05       	cpc	r25, r1
 5be:	41 f0       	breq	.+16     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x48>
 5c0:	89 2b       	or	r24, r25
 5c2:	61 f4       	brne	.+24     	; 0x5dc <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5c4:	e2 eb       	ldi	r30, 0xB2	; 178
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5ca:	e0 e9       	ldi	r30, 0x90	; 144
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5d0:	e4 e7       	ldi	r30, 0x74	; 116
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	84 91       	lpm	r24, Z
 5d6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 5d8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 5e4:	fa 01       	movw	r30, r20
 5e6:	31 83       	std	Z+1, r19	; 0x01
 5e8:	20 83       	st	Z, r18
	return Size;
}
 5ea:	08 95       	ret

000005ec <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5ec:	cf 92       	push	r12
 5ee:	df 92       	push	r13
 5f0:	ef 92       	push	r14
 5f2:	ff 92       	push	r15
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	7c 01       	movw	r14, r24
 5fe:	8b 01       	movw	r16, r22
 600:	ea 01       	movw	r28, r20
 602:	a1 d1       	rcall	.+834    	; 0x946 <Endpoint_WaitUntilReady>
 604:	81 11       	cpse	r24, r1
 606:	31 c0       	rjmp	.+98     	; 0x66a <Endpoint_Write_Stream_LE+0x7e>
 608:	20 97       	sbiw	r28, 0x00	; 0
 60a:	31 f0       	breq	.+12     	; 0x618 <Endpoint_Write_Stream_LE+0x2c>
 60c:	88 81       	ld	r24, Y
 60e:	99 81       	ldd	r25, Y+1	; 0x01
 610:	08 1b       	sub	r16, r24
 612:	19 0b       	sbc	r17, r25
 614:	e8 0e       	add	r14, r24
 616:	f9 1e       	adc	r15, r25
 618:	c1 2c       	mov	r12, r1
 61a:	d1 2c       	mov	r13, r1
 61c:	01 15       	cp	r16, r1
 61e:	11 05       	cpc	r17, r1
 620:	19 f1       	breq	.+70     	; 0x668 <Endpoint_Write_Stream_LE+0x7c>
 622:	80 91 e8 00 	lds	r24, 0x00E8
 626:	85 fd       	sbrc	r24, 5
 628:	14 c0       	rjmp	.+40     	; 0x652 <Endpoint_Write_Stream_LE+0x66>
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	8e 77       	andi	r24, 0x7E	; 126
 630:	80 93 e8 00 	sts	0x00E8, r24
 634:	f6 d3       	rcall	.+2028   	; 0xe22 <USB_USBTask>
 636:	20 97       	sbiw	r28, 0x00	; 0
 638:	41 f0       	breq	.+16     	; 0x64a <Endpoint_Write_Stream_LE+0x5e>
 63a:	88 81       	ld	r24, Y
 63c:	99 81       	ldd	r25, Y+1	; 0x01
 63e:	8c 0d       	add	r24, r12
 640:	9d 1d       	adc	r25, r13
 642:	99 83       	std	Y+1, r25	; 0x01
 644:	88 83       	st	Y, r24
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	10 c0       	rjmp	.+32     	; 0x66a <Endpoint_Write_Stream_LE+0x7e>
 64a:	7d d1       	rcall	.+762    	; 0x946 <Endpoint_WaitUntilReady>
 64c:	88 23       	and	r24, r24
 64e:	31 f3       	breq	.-52     	; 0x61c <Endpoint_Write_Stream_LE+0x30>
 650:	0c c0       	rjmp	.+24     	; 0x66a <Endpoint_Write_Stream_LE+0x7e>
 652:	f7 01       	movw	r30, r14
 654:	81 91       	ld	r24, Z+
 656:	7f 01       	movw	r14, r30
 658:	80 93 f1 00 	sts	0x00F1, r24
 65c:	01 50       	subi	r16, 0x01	; 1
 65e:	11 09       	sbc	r17, r1
 660:	ff ef       	ldi	r31, 0xFF	; 255
 662:	cf 1a       	sub	r12, r31
 664:	df 0a       	sbc	r13, r31
 666:	da cf       	rjmp	.-76     	; 0x61c <Endpoint_Write_Stream_LE+0x30>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	df 90       	pop	r13
 678:	cf 90       	pop	r12
 67a:	08 95       	ret

0000067c <Endpoint_Read_Stream_LE>:
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	7c 01       	movw	r14, r24
 68e:	8b 01       	movw	r16, r22
 690:	ea 01       	movw	r28, r20
 692:	59 d1       	rcall	.+690    	; 0x946 <Endpoint_WaitUntilReady>
 694:	81 11       	cpse	r24, r1
 696:	31 c0       	rjmp	.+98     	; 0x6fa <Endpoint_Read_Stream_LE+0x7e>
 698:	20 97       	sbiw	r28, 0x00	; 0
 69a:	31 f0       	breq	.+12     	; 0x6a8 <Endpoint_Read_Stream_LE+0x2c>
 69c:	88 81       	ld	r24, Y
 69e:	99 81       	ldd	r25, Y+1	; 0x01
 6a0:	08 1b       	sub	r16, r24
 6a2:	19 0b       	sbc	r17, r25
 6a4:	e8 0e       	add	r14, r24
 6a6:	f9 1e       	adc	r15, r25
 6a8:	c1 2c       	mov	r12, r1
 6aa:	d1 2c       	mov	r13, r1
 6ac:	01 15       	cp	r16, r1
 6ae:	11 05       	cpc	r17, r1
 6b0:	19 f1       	breq	.+70     	; 0x6f8 <Endpoint_Read_Stream_LE+0x7c>
 6b2:	80 91 e8 00 	lds	r24, 0x00E8
 6b6:	85 fd       	sbrc	r24, 5
 6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <Endpoint_Read_Stream_LE+0x66>
 6ba:	80 91 e8 00 	lds	r24, 0x00E8
 6be:	8b 77       	andi	r24, 0x7B	; 123
 6c0:	80 93 e8 00 	sts	0x00E8, r24
 6c4:	ae d3       	rcall	.+1884   	; 0xe22 <USB_USBTask>
 6c6:	20 97       	sbiw	r28, 0x00	; 0
 6c8:	41 f0       	breq	.+16     	; 0x6da <Endpoint_Read_Stream_LE+0x5e>
 6ca:	88 81       	ld	r24, Y
 6cc:	99 81       	ldd	r25, Y+1	; 0x01
 6ce:	8c 0d       	add	r24, r12
 6d0:	9d 1d       	adc	r25, r13
 6d2:	99 83       	std	Y+1, r25	; 0x01
 6d4:	88 83       	st	Y, r24
 6d6:	85 e0       	ldi	r24, 0x05	; 5
 6d8:	10 c0       	rjmp	.+32     	; 0x6fa <Endpoint_Read_Stream_LE+0x7e>
 6da:	35 d1       	rcall	.+618    	; 0x946 <Endpoint_WaitUntilReady>
 6dc:	88 23       	and	r24, r24
 6de:	31 f3       	breq	.-52     	; 0x6ac <Endpoint_Read_Stream_LE+0x30>
 6e0:	0c c0       	rjmp	.+24     	; 0x6fa <Endpoint_Read_Stream_LE+0x7e>
 6e2:	80 91 f1 00 	lds	r24, 0x00F1
 6e6:	f7 01       	movw	r30, r14
 6e8:	81 93       	st	Z+, r24
 6ea:	7f 01       	movw	r14, r30
 6ec:	01 50       	subi	r16, 0x01	; 1
 6ee:	11 09       	sbc	r17, r1
 6f0:	ff ef       	ldi	r31, 0xFF	; 255
 6f2:	cf 1a       	sub	r12, r31
 6f4:	df 0a       	sbc	r13, r31
 6f6:	da cf       	rjmp	.-76     	; 0x6ac <Endpoint_Read_Stream_LE+0x30>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	08 95       	ret

0000070c <Endpoint_Write_Control_Stream_LE>:
 70c:	20 91 1b 01 	lds	r18, 0x011B
 710:	30 91 1c 01 	lds	r19, 0x011C
 714:	26 17       	cp	r18, r22
 716:	37 07       	cpc	r19, r23
 718:	48 f0       	brcs	.+18     	; 0x72c <Endpoint_Write_Control_Stream_LE+0x20>
 71a:	61 15       	cp	r22, r1
 71c:	71 05       	cpc	r23, r1
 71e:	39 f4       	brne	.+14     	; 0x72e <Endpoint_Write_Control_Stream_LE+0x22>
 720:	20 91 e8 00 	lds	r18, 0x00E8
 724:	2e 77       	andi	r18, 0x7E	; 126
 726:	20 93 e8 00 	sts	0x00E8, r18
 72a:	01 c0       	rjmp	.+2      	; 0x72e <Endpoint_Write_Control_Stream_LE+0x22>
 72c:	b9 01       	movw	r22, r18
 72e:	20 e0       	ldi	r18, 0x00	; 0
 730:	61 15       	cp	r22, r1
 732:	71 05       	cpc	r23, r1
 734:	d1 f1       	breq	.+116    	; 0x7aa <Endpoint_Write_Control_Stream_LE+0x9e>
 736:	30 91 14 01 	lds	r19, 0x0114
 73a:	33 23       	and	r19, r19
 73c:	09 f4       	brne	.+2      	; 0x740 <Endpoint_Write_Control_Stream_LE+0x34>
 73e:	43 c0       	rjmp	.+134    	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0xba>
 740:	35 30       	cpi	r19, 0x05	; 5
 742:	09 f4       	brne	.+2      	; 0x746 <Endpoint_Write_Control_Stream_LE+0x3a>
 744:	42 c0       	rjmp	.+132    	; 0x7ca <Endpoint_Write_Control_Stream_LE+0xbe>
 746:	30 91 e8 00 	lds	r19, 0x00E8
 74a:	33 fd       	sbrc	r19, 3
 74c:	40 c0       	rjmp	.+128    	; 0x7ce <Endpoint_Write_Control_Stream_LE+0xc2>
 74e:	30 91 e8 00 	lds	r19, 0x00E8
 752:	32 ff       	sbrs	r19, 2
 754:	06 c0       	rjmp	.+12     	; 0x762 <Endpoint_Write_Control_Stream_LE+0x56>
 756:	80 91 e8 00 	lds	r24, 0x00E8
 75a:	82 ff       	sbrs	r24, 2
 75c:	29 c0       	rjmp	.+82     	; 0x7b0 <Endpoint_Write_Control_Stream_LE+0xa4>
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	08 95       	ret
 762:	30 91 e8 00 	lds	r19, 0x00E8
 766:	30 ff       	sbrs	r19, 0
 768:	e3 cf       	rjmp	.-58     	; 0x730 <Endpoint_Write_Control_Stream_LE+0x24>
 76a:	20 91 f2 00 	lds	r18, 0x00F2
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	fc 01       	movw	r30, r24
 772:	28 1b       	sub	r18, r24
 774:	39 0b       	sbc	r19, r25
 776:	cf 01       	movw	r24, r30
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	61 15       	cp	r22, r1
 77e:	71 05       	cpc	r23, r1
 780:	49 f0       	breq	.+18     	; 0x794 <Endpoint_Write_Control_Stream_LE+0x88>
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	91 05       	cpc	r25, r1
 786:	30 f4       	brcc	.+12     	; 0x794 <Endpoint_Write_Control_Stream_LE+0x88>
 788:	81 91       	ld	r24, Z+
 78a:	80 93 f1 00 	sts	0x00F1, r24
 78e:	61 50       	subi	r22, 0x01	; 1
 790:	71 09       	sbc	r23, r1
 792:	f1 cf       	rjmp	.-30     	; 0x776 <Endpoint_Write_Control_Stream_LE+0x6a>
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	08 97       	sbiw	r24, 0x08	; 8
 798:	09 f0       	breq	.+2      	; 0x79c <Endpoint_Write_Control_Stream_LE+0x90>
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	80 91 e8 00 	lds	r24, 0x00E8
 7a0:	8e 77       	andi	r24, 0x7E	; 126
 7a2:	80 93 e8 00 	sts	0x00E8, r24
 7a6:	cf 01       	movw	r24, r30
 7a8:	c3 cf       	rjmp	.-122    	; 0x730 <Endpoint_Write_Control_Stream_LE+0x24>
 7aa:	21 11       	cpse	r18, r1
 7ac:	c4 cf       	rjmp	.-120    	; 0x736 <Endpoint_Write_Control_Stream_LE+0x2a>
 7ae:	d3 cf       	rjmp	.-90     	; 0x756 <Endpoint_Write_Control_Stream_LE+0x4a>
 7b0:	80 91 14 01 	lds	r24, 0x0114
 7b4:	88 23       	and	r24, r24
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0xba>
 7b8:	85 30       	cpi	r24, 0x05	; 5
 7ba:	39 f0       	breq	.+14     	; 0x7ca <Endpoint_Write_Control_Stream_LE+0xbe>
 7bc:	80 91 e8 00 	lds	r24, 0x00E8
 7c0:	83 ff       	sbrs	r24, 3
 7c2:	c9 cf       	rjmp	.-110    	; 0x756 <Endpoint_Write_Control_Stream_LE+0x4a>
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <Endpoint_Write_Control_Stream_LE+0xc2>
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	08 95       	ret
 7ca:	83 e0       	ldi	r24, 0x03	; 3
 7cc:	08 95       	ret
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	08 95       	ret

000007d2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7d2:	20 91 1b 01 	lds	r18, 0x011B
 7d6:	30 91 1c 01 	lds	r19, 0x011C
 7da:	26 17       	cp	r18, r22
 7dc:	37 07       	cpc	r19, r23
 7de:	48 f0       	brcs	.+18     	; 0x7f2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7e0:	61 15       	cp	r22, r1
 7e2:	71 05       	cpc	r23, r1
 7e4:	39 f4       	brne	.+14     	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7e6:	20 91 e8 00 	lds	r18, 0x00E8
 7ea:	2e 77       	andi	r18, 0x7E	; 126
 7ec:	20 93 e8 00 	sts	0x00E8, r18
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0x22>
 7f2:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7f4:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7f6:	61 15       	cp	r22, r1
 7f8:	71 05       	cpc	r23, r1
 7fa:	d9 f1       	breq	.+118    	; 0x872 <Endpoint_Write_Control_PStream_LE+0xa0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7fc:	30 91 14 01 	lds	r19, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800:	33 23       	and	r19, r19
 802:	09 f4       	brne	.+2      	; 0x806 <Endpoint_Write_Control_PStream_LE+0x34>
 804:	44 c0       	rjmp	.+136    	; 0x88e <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 806:	35 30       	cpi	r19, 0x05	; 5
 808:	09 f4       	brne	.+2      	; 0x80c <Endpoint_Write_Control_PStream_LE+0x3a>
 80a:	43 c0       	rjmp	.+134    	; 0x892 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 80c:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 810:	33 fd       	sbrc	r19, 3
 812:	41 c0       	rjmp	.+130    	; 0x896 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 814:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 818:	32 ff       	sbrs	r19, 2
 81a:	06 c0       	rjmp	.+12     	; 0x828 <Endpoint_Write_Control_PStream_LE+0x56>
 81c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 820:	82 ff       	sbrs	r24, 2
 822:	2a c0       	rjmp	.+84     	; 0x878 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 828:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
 82c:	30 ff       	sbrs	r19, 0
 82e:	e3 cf       	rjmp	.-58     	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 830:	20 91 f2 00 	lds	r18, 0x00F2
 834:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 836:	fc 01       	movw	r30, r24
 838:	28 1b       	sub	r18, r24
 83a:	39 0b       	sbc	r19, r25
 83c:	c9 01       	movw	r24, r18
 83e:	8e 0f       	add	r24, r30
 840:	9f 1f       	adc	r25, r31
 842:	61 15       	cp	r22, r1
 844:	71 05       	cpc	r23, r1
 846:	51 f0       	breq	.+20     	; 0x85c <Endpoint_Write_Control_PStream_LE+0x8a>
 848:	88 30       	cpi	r24, 0x08	; 8
 84a:	91 05       	cpc	r25, r1
 84c:	38 f4       	brcc	.+14     	; 0x85c <Endpoint_Write_Control_PStream_LE+0x8a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 84e:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 850:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 854:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 856:	61 50       	subi	r22, 0x01	; 1
 858:	71 09       	sbc	r23, r1
 85a:	f0 cf       	rjmp	.-32     	; 0x83c <Endpoint_Write_Control_PStream_LE+0x6a>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 85c:	21 e0       	ldi	r18, 0x01	; 1
 85e:	08 97       	sbiw	r24, 0x08	; 8
 860:	09 f0       	breq	.+2      	; 0x864 <Endpoint_Write_Control_PStream_LE+0x92>
 862:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 864:	80 91 e8 00 	lds	r24, 0x00E8
 868:	8e 77       	andi	r24, 0x7E	; 126
 86a:	80 93 e8 00 	sts	0x00E8, r24
 86e:	cf 01       	movw	r24, r30
 870:	c2 cf       	rjmp	.-124    	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 872:	21 11       	cpse	r18, r1
 874:	c3 cf       	rjmp	.-122    	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x2a>
 876:	d2 cf       	rjmp	.-92     	; 0x81c <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 878:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 87c:	88 23       	and	r24, r24
 87e:	39 f0       	breq	.+14     	; 0x88e <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 880:	85 30       	cpi	r24, 0x05	; 5
 882:	39 f0       	breq	.+14     	; 0x892 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 884:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 888:	83 ff       	sbrs	r24, 3
 88a:	c8 cf       	rjmp	.-112    	; 0x81c <Endpoint_Write_Control_PStream_LE+0x4a>
 88c:	04 c0       	rjmp	.+8      	; 0x896 <Endpoint_Write_Control_PStream_LE+0xc4>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 892:	83 e0       	ldi	r24, 0x03	; 3
 894:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 896:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 898:	08 95       	ret

0000089a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 89a:	98 2f       	mov	r25, r24
 89c:	95 30       	cpi	r25, 0x05	; 5
 89e:	58 f5       	brcc	.+86     	; 0x8f6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 8a0:	90 93 e9 00 	sts	0x00E9, r25
 8a4:	98 17       	cp	r25, r24
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 8a8:	70 91 ec 00 	lds	r23, 0x00EC
 8ac:	20 91 ed 00 	lds	r18, 0x00ED
 8b0:	50 91 f0 00 	lds	r21, 0x00F0
 8b4:	03 c0       	rjmp	.+6      	; 0x8bc <Endpoint_ConfigureEndpoint_Prv+0x22>
 8b6:	24 2f       	mov	r18, r20
 8b8:	76 2f       	mov	r23, r22
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	21 ff       	sbrs	r18, 1
 8be:	19 c0       	rjmp	.+50     	; 0x8f2 <Endpoint_ConfigureEndpoint_Prv+0x58>
 8c0:	30 91 eb 00 	lds	r19, 0x00EB
 8c4:	3e 7f       	andi	r19, 0xFE	; 254
 8c6:	30 93 eb 00 	sts	0x00EB, r19
 8ca:	30 91 ed 00 	lds	r19, 0x00ED
 8ce:	3d 7f       	andi	r19, 0xFD	; 253
 8d0:	30 93 ed 00 	sts	0x00ED, r19
 8d4:	30 91 eb 00 	lds	r19, 0x00EB
 8d8:	31 60       	ori	r19, 0x01	; 1
 8da:	30 93 eb 00 	sts	0x00EB, r19
 8de:	70 93 ec 00 	sts	0x00EC, r23
 8e2:	20 93 ed 00 	sts	0x00ED, r18
 8e6:	50 93 f0 00 	sts	0x00F0, r21
 8ea:	20 91 ee 00 	lds	r18, 0x00EE
 8ee:	27 ff       	sbrs	r18, 7
 8f0:	07 c0       	rjmp	.+14     	; 0x900 <Endpoint_ConfigureEndpoint_Prv+0x66>
 8f2:	9f 5f       	subi	r25, 0xFF	; 255
 8f4:	d3 cf       	rjmp	.-90     	; 0x89c <Endpoint_ConfigureEndpoint_Prv+0x2>
 8f6:	8f 70       	andi	r24, 0x0F	; 15
 8f8:	80 93 e9 00 	sts	0x00E9, r24
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	08 95       	ret
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	08 95       	ret

00000904 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 904:	80 91 15 01 	lds	r24, 0x0115
 908:	87 fd       	sbrc	r24, 7
 90a:	05 c0       	rjmp	.+10     	; 0x916 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 90c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 910:	80 ff       	sbrs	r24, 0
 912:	0e c0       	rjmp	.+28     	; 0x930 <Endpoint_ClearStatusStage+0x2c>
 914:	12 c0       	rjmp	.+36     	; 0x93a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 916:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 91a:	82 fd       	sbrc	r24, 2
 91c:	05 c0       	rjmp	.+10     	; 0x928 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 91e:	80 91 14 01 	lds	r24, 0x0114
 922:	81 11       	cpse	r24, r1
 924:	f8 cf       	rjmp	.-16     	; 0x916 <Endpoint_ClearStatusStage+0x12>
 926:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 928:	80 91 e8 00 	lds	r24, 0x00E8
 92c:	8b 77       	andi	r24, 0x7B	; 123
 92e:	08 c0       	rjmp	.+16     	; 0x940 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 930:	80 91 14 01 	lds	r24, 0x0114
 934:	81 11       	cpse	r24, r1
 936:	ea cf       	rjmp	.-44     	; 0x90c <Endpoint_ClearStatusStage+0x8>
 938:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 93a:	80 91 e8 00 	lds	r24, 0x00E8
 93e:	8e 77       	andi	r24, 0x7E	; 126
 940:	80 93 e8 00 	sts	0x00E8, r24
 944:	08 95       	ret

00000946 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 946:	80 91 e4 00 	lds	r24, 0x00E4
 94a:	90 91 e5 00 	lds	r25, 0x00E5
 94e:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 950:	20 91 ec 00 	lds	r18, 0x00EC
 954:	20 ff       	sbrs	r18, 0
 956:	21 c0       	rjmp	.+66     	; 0x99a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 958:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 95c:	20 fd       	sbrc	r18, 0
 95e:	21 c0       	rjmp	.+66     	; 0x9a2 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 960:	20 91 14 01 	lds	r18, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 964:	22 23       	and	r18, r18
 966:	89 f0       	breq	.+34     	; 0x98a <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 968:	25 30       	cpi	r18, 0x05	; 5
 96a:	89 f0       	breq	.+34     	; 0x98e <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 96c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 970:	25 fd       	sbrc	r18, 5
 972:	0f c0       	rjmp	.+30     	; 0x992 <Endpoint_WaitUntilReady+0x4c>
 974:	20 91 e4 00 	lds	r18, 0x00E4
 978:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 97c:	28 17       	cp	r18, r24
 97e:	39 07       	cpc	r19, r25
 980:	39 f3       	breq	.-50     	; 0x950 <Endpoint_WaitUntilReady+0xa>
 982:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 984:	41 f0       	breq	.+16     	; 0x996 <Endpoint_WaitUntilReady+0x50>
 986:	c9 01       	movw	r24, r18
 988:	e3 cf       	rjmp	.-58     	; 0x950 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 98a:	82 e0       	ldi	r24, 0x02	; 2
 98c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 98e:	83 e0       	ldi	r24, 0x03	; 3
 990:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 996:	84 e0       	ldi	r24, 0x04	; 4
 998:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 99a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 99e:	22 ff       	sbrs	r18, 2
 9a0:	df cf       	rjmp	.-66     	; 0x960 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 9a6:	41 d0       	rcall	.+130    	; 0xa2a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 9a8:	43 d0       	rcall	.+134    	; 0xa30 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9aa:	80 91 d8 00 	lds	r24, 0x00D8
 9ae:	8f 77       	andi	r24, 0x7F	; 127
 9b0:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 9b4:	80 91 d8 00 	lds	r24, 0x00D8
 9b8:	80 68       	ori	r24, 0x80	; 128
 9ba:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9be:	80 91 d8 00 	lds	r24, 0x00D8
 9c2:	8f 7d       	andi	r24, 0xDF	; 223
 9c4:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9c8:	84 e0       	ldi	r24, 0x04	; 4
 9ca:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 9d0:	09 b4       	in	r0, 0x29	; 41
 9d2:	00 fe       	sbrs	r0, 0
 9d4:	fd cf       	rjmp	.-6      	; 0x9d0 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9d6:	10 92 14 01 	sts	0x0114, r1
	USB_Device_ConfigurationNumber  = 0;
 9da:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 9de:	10 92 12 01 	sts	0x0112, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 9e2:	10 92 11 01 	sts	0x0111, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9e6:	42 e0       	ldi	r20, 0x02	; 2
 9e8:	60 e0       	ldi	r22, 0x00	; 0
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	56 df       	rcall	.-340    	; 0x89a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9ee:	80 91 e1 00 	lds	r24, 0x00E1
 9f2:	8e 7f       	andi	r24, 0xFE	; 254
 9f4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9f8:	80 91 e2 00 	lds	r24, 0x00E2
 9fc:	81 60       	ori	r24, 0x01	; 1
 9fe:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 a02:	80 91 e2 00 	lds	r24, 0x00E2
 a06:	88 60       	ori	r24, 0x08	; 8
 a08:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 a0c:	80 91 e0 00 	lds	r24, 0x00E0
 a10:	8e 7f       	andi	r24, 0xFE	; 254
 a12:	80 93 e0 00 	sts	0x00E0, r24
 a16:	08 95       	ret

00000a18 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 a18:	e3 e6       	ldi	r30, 0x63	; 99
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8e 7f       	andi	r24, 0xFE	; 254
 a20:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
 a28:	be cf       	rjmp	.-132    	; 0x9a6 <USB_ResetInterface>

00000a2a <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a2a:	10 92 e2 00 	sts	0x00E2, r1
 a2e:	08 95       	ret

00000a30 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a30:	10 92 e1 00 	sts	0x00E1, r1
 a34:	08 95       	ret

00000a36 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	2f 93       	push	r18
 a42:	3f 93       	push	r19
 a44:	4f 93       	push	r20
 a46:	5f 93       	push	r21
 a48:	6f 93       	push	r22
 a4a:	7f 93       	push	r23
 a4c:	8f 93       	push	r24
 a4e:	9f 93       	push	r25
 a50:	af 93       	push	r26
 a52:	bf 93       	push	r27
 a54:	ef 93       	push	r30
 a56:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a58:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a5c:	82 ff       	sbrs	r24, 2
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a60:	80 91 e2 00 	lds	r24, 0x00E2
 a64:	82 ff       	sbrs	r24, 2
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a68:	80 91 e1 00 	lds	r24, 0x00E1
 a6c:	8b 7f       	andi	r24, 0xFB	; 251
 a6e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a72:	d6 d1       	rcall	.+940    	; 0xe20 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a74:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a78:	80 ff       	sbrs	r24, 0
 a7a:	17 c0       	rjmp	.+46     	; 0xaaa <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a7c:	80 91 e2 00 	lds	r24, 0x00E2
 a80:	80 ff       	sbrs	r24, 0
 a82:	13 c0       	rjmp	.+38     	; 0xaaa <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a84:	80 91 e2 00 	lds	r24, 0x00E2
 a88:	8e 7f       	andi	r24, 0xFE	; 254
 a8a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a8e:	80 91 e2 00 	lds	r24, 0x00E2
 a92:	80 61       	ori	r24, 0x10	; 16
 a94:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a98:	80 91 d8 00 	lds	r24, 0x00D8
 a9c:	80 62       	ori	r24, 0x20	; 32
 a9e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 aa2:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 aa4:	10 92 14 01 	sts	0x0114, r1
		EVENT_USB_Device_Disconnect();
 aa8:	96 db       	rcall	.-2260   	; 0x1d6 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 aaa:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 aae:	84 ff       	sbrs	r24, 4
 ab0:	2f c0       	rjmp	.+94     	; 0xb10 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 ab2:	80 91 e2 00 	lds	r24, 0x00E2
 ab6:	84 ff       	sbrs	r24, 4
 ab8:	2b c0       	rjmp	.+86     	; 0xb10 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 aba:	84 e0       	ldi	r24, 0x04	; 4
 abc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 abe:	86 e0       	ldi	r24, 0x06	; 6
 ac0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 ac2:	09 b4       	in	r0, 0x29	; 41
 ac4:	00 fe       	sbrs	r0, 0
 ac6:	fd cf       	rjmp	.-6      	; 0xac2 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 ac8:	80 91 d8 00 	lds	r24, 0x00D8
 acc:	8f 7d       	andi	r24, 0xDF	; 223
 ace:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 ad2:	80 91 e1 00 	lds	r24, 0x00E1
 ad6:	8f 7e       	andi	r24, 0xEF	; 239
 ad8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 adc:	80 91 e2 00 	lds	r24, 0x00E2
 ae0:	8f 7e       	andi	r24, 0xEF	; 239
 ae2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 ae6:	80 91 e2 00 	lds	r24, 0x00E2
 aea:	81 60       	ori	r24, 0x01	; 1
 aec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 af0:	80 91 10 01 	lds	r24, 0x0110
 af4:	88 23       	and	r24, r24
 af6:	11 f0       	breq	.+4      	; 0xafc <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 af8:	84 e0       	ldi	r24, 0x04	; 4
 afa:	07 c0       	rjmp	.+14     	; 0xb0a <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 afc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b00:	87 ff       	sbrs	r24, 7
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__vector_11+0xd2>
 b04:	83 e0       	ldi	r24, 0x03	; 3
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <__vector_11+0xd4>
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	80 93 14 01 	sts	0x0114, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 b0e:	5e db       	rcall	.-2372   	; 0x1cc <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b10:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b14:	83 ff       	sbrs	r24, 3
 b16:	22 c0       	rjmp	.+68     	; 0xb5c <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b18:	80 91 e2 00 	lds	r24, 0x00E2
 b1c:	83 ff       	sbrs	r24, 3
 b1e:	1e c0       	rjmp	.+60     	; 0xb5c <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b20:	80 91 e1 00 	lds	r24, 0x00E1
 b24:	87 7f       	andi	r24, 0xF7	; 247
 b26:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b2a:	82 e0       	ldi	r24, 0x02	; 2
 b2c:	80 93 14 01 	sts	0x0114, r24
		USB_Device_ConfigurationNumber = 0;
 b30:	10 92 10 01 	sts	0x0110, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b34:	80 91 e1 00 	lds	r24, 0x00E1
 b38:	8e 7f       	andi	r24, 0xFE	; 254
 b3a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b3e:	80 91 e2 00 	lds	r24, 0x00E2
 b42:	8e 7f       	andi	r24, 0xFE	; 254
 b44:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b48:	80 91 e2 00 	lds	r24, 0x00E2
 b4c:	80 61       	ori	r24, 0x10	; 16
 b4e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b52:	42 e0       	ldi	r20, 0x02	; 2
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	a0 de       	rcall	.-704    	; 0x89a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b5a:	62 d1       	rcall	.+708    	; 0xe20 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b5c:	ff 91       	pop	r31
 b5e:	ef 91       	pop	r30
 b60:	bf 91       	pop	r27
 b62:	af 91       	pop	r26
 b64:	9f 91       	pop	r25
 b66:	8f 91       	pop	r24
 b68:	7f 91       	pop	r23
 b6a:	6f 91       	pop	r22
 b6c:	5f 91       	pop	r21
 b6e:	4f 91       	pop	r20
 b70:	3f 91       	pop	r19
 b72:	2f 91       	pop	r18
 b74:	0f 90       	pop	r0
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	0f 90       	pop	r0
 b7a:	1f 90       	pop	r1
 b7c:	18 95       	reti

00000b7e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b7e:	1f 93       	push	r17
 b80:	cf 93       	push	r28
 b82:	df 93       	push	r29
 b84:	cd b7       	in	r28, 0x3d	; 61
 b86:	de b7       	in	r29, 0x3e	; 62
 b88:	aa 97       	sbiw	r28, 0x2a	; 42
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	e5 e1       	ldi	r30, 0x15	; 21
 b96:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b98:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b9c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b9e:	21 e0       	ldi	r18, 0x01	; 1
 ba0:	ed 31       	cpi	r30, 0x1D	; 29
 ba2:	f2 07       	cpc	r31, r18
 ba4:	c9 f7       	brne	.-14     	; 0xb98 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 ba6:	3c d1       	rcall	.+632    	; 0xe20 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 bac:	83 ff       	sbrs	r24, 3
 bae:	20 c1       	rjmp	.+576    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 bb0:	90 91 15 01 	lds	r25, 0x0115

		switch (USB_ControlRequest.bRequest)
 bb4:	80 91 16 01 	lds	r24, 0x0116
 bb8:	85 30       	cpi	r24, 0x05	; 5
 bba:	09 f4       	brne	.+2      	; 0xbbe <USB_Device_ProcessControlRequest+0x40>
 bbc:	77 c0       	rjmp	.+238    	; 0xcac <USB_Device_ProcessControlRequest+0x12e>
 bbe:	30 f4       	brcc	.+12     	; 0xbcc <USB_Device_ProcessControlRequest+0x4e>
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	81 f1       	breq	.+96     	; 0xc24 <USB_Device_ProcessControlRequest+0xa6>
 bc4:	68 f0       	brcs	.+26     	; 0xbe0 <USB_Device_ProcessControlRequest+0x62>
 bc6:	83 30       	cpi	r24, 0x03	; 3
 bc8:	69 f1       	breq	.+90     	; 0xc24 <USB_Device_ProcessControlRequest+0xa6>
 bca:	12 c1       	rjmp	.+548    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
 bcc:	88 30       	cpi	r24, 0x08	; 8
 bce:	09 f4       	brne	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x54>
 bd0:	e1 c0       	rjmp	.+450    	; 0xd94 <USB_Device_ProcessControlRequest+0x216>
 bd2:	89 30       	cpi	r24, 0x09	; 9
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x5a>
 bd6:	f0 c0       	rjmp	.+480    	; 0xdb8 <USB_Device_ProcessControlRequest+0x23a>
 bd8:	86 30       	cpi	r24, 0x06	; 6
 bda:	09 f0       	breq	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x60>
 bdc:	09 c1       	rjmp	.+530    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
 bde:	88 c0       	rjmp	.+272    	; 0xcf0 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 be0:	90 38       	cpi	r25, 0x80	; 128
 be2:	81 f0       	breq	.+32     	; 0xc04 <USB_Device_ProcessControlRequest+0x86>
 be4:	92 38       	cpi	r25, 0x82	; 130
 be6:	09 f0       	breq	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x6c>
 be8:	03 c1       	rjmp	.+518    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bea:	80 91 19 01 	lds	r24, 0x0119
 bee:	8f 70       	andi	r24, 0x0F	; 15
 bf0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bf4:	80 91 eb 00 	lds	r24, 0x00EB
 bf8:	85 fb       	bst	r24, 5
 bfa:	88 27       	eor	r24, r24
 bfc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bfe:	10 92 e9 00 	sts	0x00E9, r1
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 c04:	80 91 11 01 	lds	r24, 0x0111
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c08:	90 91 12 01 	lds	r25, 0x0112
 c0c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c0e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c10:	90 91 e8 00 	lds	r25, 0x00E8
 c14:	97 7f       	andi	r25, 0xF7	; 247
 c16:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c1a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 c1e:	10 92 f1 00 	sts	0x00F1, r1
 c22:	c3 c0       	rjmp	.+390    	; 0xdaa <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c24:	29 2f       	mov	r18, r25
 c26:	2d 7f       	andi	r18, 0xFD	; 253
 c28:	09 f0       	breq	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0xae>
 c2a:	e2 c0       	rjmp	.+452    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c2c:	99 23       	and	r25, r25
 c2e:	19 f0       	breq	.+6      	; 0xc36 <USB_Device_ProcessControlRequest+0xb8>
 c30:	92 30       	cpi	r25, 0x02	; 2
 c32:	61 f0       	breq	.+24     	; 0xc4c <USB_Device_ProcessControlRequest+0xce>
 c34:	dd c0       	rjmp	.+442    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c36:	90 91 17 01 	lds	r25, 0x0117
 c3a:	91 30       	cpi	r25, 0x01	; 1
 c3c:	09 f0       	breq	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0xc2>
 c3e:	d8 c0       	rjmp	.+432    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c40:	83 30       	cpi	r24, 0x03	; 3
 c42:	09 f0       	breq	.+2      	; 0xc46 <USB_Device_ProcessControlRequest+0xc8>
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	90 93 12 01 	sts	0x0112, r25
 c4a:	2a c0       	rjmp	.+84     	; 0xca0 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c4c:	90 91 17 01 	lds	r25, 0x0117
 c50:	91 11       	cpse	r25, r1
 c52:	26 c0       	rjmp	.+76     	; 0xca0 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c54:	20 91 19 01 	lds	r18, 0x0119
 c58:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 c5a:	09 f4       	brne	.+2      	; 0xc5e <USB_Device_ProcessControlRequest+0xe0>
 c5c:	c9 c0       	rjmp	.+402    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c5e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c62:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c66:	90 ff       	sbrs	r25, 0
 c68:	1b c0       	rjmp	.+54     	; 0xca0 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c6a:	83 30       	cpi	r24, 0x03	; 3
 c6c:	21 f4       	brne	.+8      	; 0xc76 <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c6e:	80 91 eb 00 	lds	r24, 0x00EB
 c72:	80 62       	ori	r24, 0x20	; 32
 c74:	13 c0       	rjmp	.+38     	; 0xc9c <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c76:	80 91 eb 00 	lds	r24, 0x00EB
 c7a:	80 61       	ori	r24, 0x10	; 16
 c7c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c80:	81 e0       	ldi	r24, 0x01	; 1
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	02 2e       	mov	r0, r18
 c86:	01 c0       	rjmp	.+2      	; 0xc8a <USB_Device_ProcessControlRequest+0x10c>
 c88:	88 0f       	add	r24, r24
 c8a:	0a 94       	dec	r0
 c8c:	ea f7       	brpl	.-6      	; 0xc88 <USB_Device_ProcessControlRequest+0x10a>
 c8e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 c92:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c96:	80 91 eb 00 	lds	r24, 0x00EB
 c9a:	88 60       	ori	r24, 0x08	; 8
 c9c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ca4:	80 91 e8 00 	lds	r24, 0x00E8
 ca8:	87 7f       	andi	r24, 0xF7	; 247
 caa:	82 c0       	rjmp	.+260    	; 0xdb0 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cac:	91 11       	cpse	r25, r1
 cae:	a0 c0       	rjmp	.+320    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 cb0:	10 91 17 01 	lds	r17, 0x0117
 cb4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 cb6:	80 91 e3 00 	lds	r24, 0x00E3
 cba:	80 78       	andi	r24, 0x80	; 128
 cbc:	81 2b       	or	r24, r17
 cbe:	80 93 e3 00 	sts	0x00E3, r24
 cc2:	80 91 e8 00 	lds	r24, 0x00E8
 cc6:	87 7f       	andi	r24, 0xF7	; 247
 cc8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ccc:	1b de       	rcall	.-970    	; 0x904 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cce:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 cd2:	80 ff       	sbrs	r24, 0
 cd4:	fc cf       	rjmp	.-8      	; 0xcce <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 cd6:	80 91 e3 00 	lds	r24, 0x00E3
 cda:	80 68       	ori	r24, 0x80	; 128
 cdc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ce0:	11 23       	and	r17, r17
 ce2:	11 f0       	breq	.+4      	; 0xce8 <USB_Device_ProcessControlRequest+0x16a>
 ce4:	83 e0       	ldi	r24, 0x03	; 3
 ce6:	01 c0       	rjmp	.+2      	; 0xcea <USB_Device_ProcessControlRequest+0x16c>
 ce8:	82 e0       	ldi	r24, 0x02	; 2
 cea:	80 93 14 01 	sts	0x0114, r24
 cee:	80 c0       	rjmp	.+256    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cf0:	90 58       	subi	r25, 0x80	; 128
 cf2:	92 30       	cpi	r25, 0x02	; 2
 cf4:	08 f0       	brcs	.+2      	; 0xcf8 <USB_Device_ProcessControlRequest+0x17a>
 cf6:	7c c0       	rjmp	.+248    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cf8:	80 91 17 01 	lds	r24, 0x0117
 cfc:	90 91 18 01 	lds	r25, 0x0118
 d00:	8c 3d       	cpi	r24, 0xDC	; 220
 d02:	23 e0       	ldi	r18, 0x03	; 3
 d04:	92 07       	cpc	r25, r18
 d06:	71 f5       	brne	.+92     	; 0xd64 <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d08:	83 e0       	ldi	r24, 0x03	; 3
 d0a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d0c:	8a e2       	ldi	r24, 0x2A	; 42
 d0e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d10:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d12:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d14:	de 01       	movw	r26, r28
 d16:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d18:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d1a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d1c:	51 e2       	ldi	r21, 0x21	; 33
 d1e:	e3 2f       	mov	r30, r19
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	50 93 57 00 	sts	0x0057, r21
 d26:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 d28:	20 ff       	sbrs	r18, 0
 d2a:	03 c0       	rjmp	.+6      	; 0xd32 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
 d2c:	e2 95       	swap	r30
 d2e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d30:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d32:	ef 70       	andi	r30, 0x0F	; 15
 d34:	8e 2f       	mov	r24, r30
 d36:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d38:	ea 30       	cpi	r30, 0x0A	; 10
 d3a:	10 f0       	brcs	.+4      	; 0xd40 <USB_Device_ProcessControlRequest+0x1c2>
 d3c:	c7 96       	adiw	r24, 0x37	; 55
 d3e:	01 c0       	rjmp	.+2      	; 0xd42 <USB_Device_ProcessControlRequest+0x1c4>
 d40:	c0 96       	adiw	r24, 0x30	; 48
 d42:	8d 93       	st	X+, r24
 d44:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d46:	2f 5f       	subi	r18, 0xFF	; 255
 d48:	24 31       	cpi	r18, 0x14	; 20
 d4a:	49 f7       	brne	.-46     	; 0xd1e <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d4c:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d58:	6a e2       	ldi	r22, 0x2A	; 42
 d5a:	70 e0       	ldi	r23, 0x00	; 0
 d5c:	ce 01       	movw	r24, r28
 d5e:	01 96       	adiw	r24, 0x01	; 1
 d60:	d5 dc       	rcall	.-1622   	; 0x70c <Endpoint_Write_Control_Stream_LE>
 d62:	12 c0       	rjmp	.+36     	; 0xd88 <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d64:	ae 01       	movw	r20, r28
 d66:	4f 5f       	subi	r20, 0xFF	; 255
 d68:	5f 4f       	sbci	r21, 0xFF	; 255
 d6a:	60 91 19 01 	lds	r22, 0x0119
 d6e:	0c dc       	rcall	.-2024   	; 0x588 <CALLBACK_USB_GetDescriptor>
 d70:	00 97       	sbiw	r24, 0x00	; 0
 d72:	09 f4       	brne	.+2      	; 0xd76 <USB_Device_ProcessControlRequest+0x1f8>
 d74:	3d c0       	rjmp	.+122    	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
 d76:	20 91 e8 00 	lds	r18, 0x00E8
 d7a:	27 7f       	andi	r18, 0xF7	; 247
 d7c:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d80:	bc 01       	movw	r22, r24
 d82:	89 81       	ldd	r24, Y+1	; 0x01
 d84:	9a 81       	ldd	r25, Y+2	; 0x02
 d86:	25 dd       	rcall	.-1462   	; 0x7d2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d88:	80 91 e8 00 	lds	r24, 0x00E8
 d8c:	8b 77       	andi	r24, 0x7B	; 123
 d8e:	80 93 e8 00 	sts	0x00E8, r24
 d92:	2e c0       	rjmp	.+92     	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d94:	90 38       	cpi	r25, 0x80	; 128
 d96:	61 f5       	brne	.+88     	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d98:	80 91 e8 00 	lds	r24, 0x00E8
 d9c:	87 7f       	andi	r24, 0xF7	; 247
 d9e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 da2:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 da6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 daa:	80 91 e8 00 	lds	r24, 0x00E8
 dae:	8e 77       	andi	r24, 0x7E	; 126
 db0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 db4:	a7 dd       	rcall	.-1202   	; 0x904 <Endpoint_ClearStatusStage>
 db6:	1c c0       	rjmp	.+56     	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 db8:	91 11       	cpse	r25, r1
 dba:	1a c0       	rjmp	.+52     	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 dbc:	90 91 17 01 	lds	r25, 0x0117
 dc0:	92 30       	cpi	r25, 0x02	; 2
 dc2:	b0 f4       	brcc	.+44     	; 0xdf0 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc4:	80 91 e8 00 	lds	r24, 0x00E8
 dc8:	87 7f       	andi	r24, 0xF7	; 247
 dca:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 dce:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
 dd2:	98 dd       	rcall	.-1232   	; 0x904 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 dd4:	80 91 10 01 	lds	r24, 0x0110
 dd8:	81 11       	cpse	r24, r1
 dda:	04 c0       	rjmp	.+8      	; 0xde4 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ddc:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 de0:	87 ff       	sbrs	r24, 7
 de2:	02 c0       	rjmp	.+4      	; 0xde8 <USB_Device_ProcessControlRequest+0x26a>
 de4:	84 e0       	ldi	r24, 0x04	; 4
 de6:	01 c0       	rjmp	.+2      	; 0xdea <USB_Device_ProcessControlRequest+0x26c>
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	80 93 14 01 	sts	0x0114, r24

	EVENT_USB_Device_ConfigurationChanged();
 dee:	f8 d9       	rcall	.-3088   	; 0x1e0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 df0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 df4:	83 ff       	sbrs	r24, 3
 df6:	0a c0       	rjmp	.+20     	; 0xe0c <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 df8:	80 91 e8 00 	lds	r24, 0x00E8
 dfc:	87 7f       	andi	r24, 0xF7	; 247
 dfe:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e02:	80 91 eb 00 	lds	r24, 0x00EB
 e06:	80 62       	ori	r24, 0x20	; 32
 e08:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e0c:	aa 96       	adiw	r28, 0x2a	; 42
 e0e:	0f b6       	in	r0, 0x3f	; 63
 e10:	f8 94       	cli
 e12:	de bf       	out	0x3e, r29	; 62
 e14:	0f be       	out	0x3f, r0	; 63
 e16:	cd bf       	out	0x3d, r28	; 61
 e18:	df 91       	pop	r29
 e1a:	cf 91       	pop	r28
 e1c:	1f 91       	pop	r17
 e1e:	08 95       	ret

00000e20 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 e20:	08 95       	ret

00000e22 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e22:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e24:	80 91 14 01 	lds	r24, 0x0114
 e28:	88 23       	and	r24, r24
 e2a:	a9 f0       	breq	.+42     	; 0xe56 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e2c:	80 91 e9 00 	lds	r24, 0x00E9
 e30:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e32:	90 91 ec 00 	lds	r25, 0x00EC
 e36:	90 ff       	sbrs	r25, 0
 e38:	02 c0       	rjmp	.+4      	; 0xe3e <USB_USBTask+0x1c>
 e3a:	90 e8       	ldi	r25, 0x80	; 128
 e3c:	01 c0       	rjmp	.+2      	; 0xe40 <USB_USBTask+0x1e>
 e3e:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e40:	c9 2f       	mov	r28, r25
 e42:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e44:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e48:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 e4c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 e4e:	97 de       	rcall	.-722    	; 0xb7e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e50:	cf 70       	andi	r28, 0x0F	; 15
 e52:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e56:	cf 91       	pop	r28
 e58:	08 95       	ret

00000e5a <_exit>:
 e5a:	f8 94       	cli

00000e5c <__stop_program>:
 e5c:	ff cf       	rjmp	.-2      	; 0xe5c <__stop_program>
